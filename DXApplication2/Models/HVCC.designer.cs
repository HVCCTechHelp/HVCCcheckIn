#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HVCC.Shell.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HVCC_DEV")]
	public partial class HVCCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWaterMeterReading(WaterMeterReading instance);
    partial void InsertApplicationDefault(ApplicationDefault instance);
    partial void UpdateApplicationDefault(ApplicationDefault instance);
    partial void DeleteApplicationDefault(ApplicationDefault instance);
    partial void DeleteProperty(Property instance);
    partial void UpdateFacilityUsage(FacilityUsage instance);
    partial void DeleteFacilityUsage(FacilityUsage instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertWellXProperty(WellXProperty instance);
    partial void UpdateWellXProperty(WellXProperty instance);
    partial void DeleteWellXProperty(WellXProperty instance);
    partial void InsertWaterWell(WaterWell instance);
    partial void UpdateWaterWell(WaterWell instance);
    partial void DeleteWaterWell(WaterWell instance);
    partial void UpdateWellMeterReading(WellMeterReading instance);
    partial void DeleteWellMeterReading(WellMeterReading instance);
    #endregion
		
		public HVCCDataContext() : 
				base(global::HVCC.Shell.Properties.Settings.Default.HVCCConnectionStringDEV, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WaterMeterReading> WaterMeterReadings
		{
			get
			{
				return this.GetTable<WaterMeterReading>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationDefault> ApplicationDefaults
		{
			get
			{
				return this.GetTable<ApplicationDefault>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<GolfCart> GolfCarts
		{
			get
			{
				return this.GetTable<GolfCart>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationPermission> ApplicationPermissions
		{
			get
			{
				return this.GetTable<ApplicationPermission>();
			}
		}
		
		public System.Data.Linq.Table<FacilityUsage> FacilityUsages
		{
			get
			{
				return this.GetTable<FacilityUsage>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<WellXProperty> WellXProperties
		{
			get
			{
				return this.GetTable<WellXProperty>();
			}
		}
		
		public System.Data.Linq.Table<WaterWell> WaterWells
		{
			get
			{
				return this.GetTable<WaterWell>();
			}
		}
		
		public System.Data.Linq.Table<WellMeterReading> WellMeterReadings
		{
			get
			{
				return this.GetTable<WellMeterReading>();
			}
		}
		
		private void UpdateWaterMeterReading(WaterMeterReading obj)
		{
			this.usp_UpdateWaterMeterReading(((System.Nullable<int>)(obj.RowID)), ((System.Nullable<int>)(obj.PropertyID)), ((System.Nullable<int>)(obj.MeterReading)), ((System.Nullable<int>)(obj.Consumption)), ((System.Nullable<System.DateTime>)(obj.ReadingDate)));
		}
		
		private void DeleteWaterMeterReading(WaterMeterReading obj)
		{
			this.usp_DeleteWaterMeterReading(((System.Nullable<int>)(obj.RowID)));
		}
		
		private void InsertNote(Note obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertNote(((System.Nullable<int>)(obj.PropertyID)), obj.Comment, ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void UpdateNote(Note obj)
		{
			this.usp_UdateNote(((System.Nullable<int>)(obj.PropertyID)), obj.Comment);
		}
		
		private void DeleteNote(Note obj)
		{
			this.usp_DeleteNote(((System.Nullable<int>)(obj.RowID)));
		}
		
		private void InsertGolfCart(GolfCart obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertGolfCart(((System.Nullable<int>)(obj.PropertyID)), obj.Customer, obj.FName, obj.LName, obj.Year, ((System.Nullable<int>)(obj.Quanity)), ((System.Nullable<bool>)(obj.IsPaid)), ((System.Nullable<System.DateTime>)(obj.PaymentDate)), ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void UpdateGolfCart(GolfCart obj)
		{
			this.usp_UdateGolfCart(((System.Nullable<int>)(obj.PropertyID)), obj.Customer, obj.FName, obj.LName, obj.Year, ((System.Nullable<int>)(obj.Quanity)), ((System.Nullable<bool>)(obj.IsPaid)), ((System.Nullable<System.DateTime>)(obj.PaymentDate)));
		}
		
		private void DeleteGolfCart(GolfCart obj)
		{
			this.usp_DeleteGolfCart(((System.Nullable<int>)(obj.RowID)));
		}
		
		private void InsertProperty(Property obj)
		{
			this.usp_InsertProperty(obj.Customer, ((System.Nullable<int>)(obj.Section)), ((System.Nullable<int>)(obj.Block)), ((System.Nullable<int>)(obj.Lot)), obj.SubLot, obj.BillTo, ((System.Nullable<decimal>)(obj.Balance)), ((System.Nullable<bool>)(obj.IsInGoodStanding)), obj.Parcel, obj.PhysicalAddress, obj.Status, obj.OwnerLName, obj.OwnerFName, obj.OwnerAddress, obj.OwnerAddress2, obj.OwnerCity, obj.OwnerState, obj.OwnerZip, obj.OwnerPrimaryPhone, obj.OwnerSecondaryPhone, obj.OwnerEmail, ((System.Nullable<int>)(obj.MeterNumber)), obj.WaterSystemNotes);
		}
		
		private void UpdateProperty(Property obj)
		{
			this.usp_UpdateProperty(((System.Nullable<int>)(obj.PropertyID)), obj.Customer, ((System.Nullable<int>)(obj.Section)), ((System.Nullable<int>)(obj.Block)), ((System.Nullable<int>)(obj.Lot)), obj.SubLot, obj.BillTo, ((System.Nullable<decimal>)(obj.Balance)), ((System.Nullable<bool>)(obj.IsInGoodStanding)), obj.Parcel, obj.PhysicalAddress, obj.Status, obj.CommonNotes, obj.OwnerLName, obj.OwnerFName, obj.OwnerAddress, obj.OwnerAddress2, obj.OwnerCity, obj.OwnerState, obj.OwnerZip, obj.OwnerPrimaryPhone, obj.OwnerSecondaryPhone, obj.OwnerEmail, ((System.Nullable<int>)(obj.MeterNumber)), obj.WaterSystemNotes);
		}
		
		private void InsertFacilityUsage(FacilityUsage obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertFacilityUsage(((System.Nullable<int>)(obj.PropertyID)), ((System.Nullable<int>)(obj.RelationshipId)), ((System.Nullable<int>)(obj.GolfRoundsMember)), ((System.Nullable<int>)(obj.GolfRoundsGuest)), ((System.Nullable<int>)(obj.PoolMember)), ((System.Nullable<int>)(obj.PoolGuest)), ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void InsertRelationship(Relationship obj)
		{
			System.Nullable<int> p1 = obj.RelationshipID;
			this.usp_InsertRelationship(((System.Nullable<bool>)(obj.Active)), ((System.Nullable<int>)(obj.PropertyID)), obj.FName, obj.LName, obj.RelationToOwner, obj.Photo, ref p1);
			obj.RelationshipID = p1.GetValueOrDefault();
		}
		
		private void UpdateRelationship(Relationship obj)
		{
			this.usp_UdateRelationship(((System.Nullable<int>)(obj.RelationshipID)), ((System.Nullable<bool>)(obj.Active)), ((System.Nullable<int>)(obj.PropertyID)), obj.FName, obj.LName, obj.RelationToOwner, obj.Photo);
		}
		
		private void InsertWellMeterReading(WellMeterReading obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertWellMeterReading(((System.Nullable<int>)(obj.WellNumber)), ((System.Nullable<System.DateTime>)(obj.MeterReadingDate)), ((System.Nullable<long>)(obj.MeterReading)), obj.MeterUnitOfMeasure, ((System.Nullable<long>)(obj.ThroughputInGallons)), ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetPropertyById")]
		public ISingleResult<usp_GetPropertyByIdResult> usp_GetPropertyById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyID", DbType="Int")] System.Nullable<int> propertyID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyID);
			return ((ISingleResult<usp_GetPropertyByIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteWaterMeterReading")]
		public int usp_DeleteWaterMeterReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateWaterMeterReading")]
		public int usp_UpdateWaterMeterReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterReading", DbType="Int")] System.Nullable<int> meterReading, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Consumption", DbType="Int")] System.Nullable<int> consumption, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReadingDate", DbType="Date")] System.Nullable<System.DateTime> readingDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId, propertyId, meterReading, consumption, readingDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteFacilityUsage")]
		public int usp_DeleteFacilityUsage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateFacilityUsage")]
		public int usp_UdateFacilityUsage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsMember", DbType="Int")] System.Nullable<int> golfRoundsMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsGuest", DbType="Int")] System.Nullable<int> golfRoundsGuest, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolMember", DbType="Int")] System.Nullable<int> poolMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolGuest", DbType="Int")] System.Nullable<int> poolGuest)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, golfRoundsMember, golfRoundsGuest, poolMember, poolGuest);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteNote")]
		public int usp_DeleteNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertNote")]
		public int usp_InsertNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(250)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, comment, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateNote")]
		public int usp_UdateNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(250)")] string comment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, comment);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_IsMember", IsComposable=true)]
		public System.Nullable<bool> fn_IsMember([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="VarChar(MAX)")] string roleName)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleName).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateProperty")]
		public int usp_UpdateProperty(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Section", DbType="Int")] System.Nullable<int> section, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Block", DbType="Int")] System.Nullable<int> block, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lot", DbType="Int")] System.Nullable<int> lot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubLot", DbType="VarChar(10)")] string subLot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="BillTo", DbType="VarChar(100)")] string billTo, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Balance", DbType="Decimal(19,4)")] System.Nullable<decimal> balance, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsInGoodStanding", DbType="Bit")] System.Nullable<bool> isInGoodStanding, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Parcel", DbType="VarChar(50)")] string parcel, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhysicalAddress", DbType="VarChar(50)")] string physicalAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="VarChar(10)")] string status, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="CommonNotes", DbType="VarChar(400)")] string commonNotes, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerLName", DbType="VarChar(50)")] string ownerLName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerFName", DbType="VarChar(50)")] string ownerFName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerAddress", DbType="VarChar(50)")] string ownerAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerAddress2", DbType="VarChar(50)")] string ownerAddress2, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerCity", DbType="VarChar(50)")] string ownerCity, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerState", DbType="VarChar(4)")] string ownerState, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerZip", DbType="VarChar(20)")] string ownerZip, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerPrimaryPhone", DbType="VarChar(20)")] string ownerPrimaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerSecondaryPhone", DbType="VarChar(20)")] string ownerSecondaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerEmail", DbType="VarChar(50)")] string ownerEmail, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterNumber", DbType="Int")] System.Nullable<int> meterNumber, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="WaterSystemNotes", DbType="VarChar(250)")] string waterSystemNotes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, customer, section, block, lot, subLot, billTo, balance, isInGoodStanding, parcel, physicalAddress, status, commonNotes, ownerLName, ownerFName, ownerAddress, ownerAddress2, ownerCity, ownerState, ownerZip, ownerPrimaryPhone, ownerSecondaryPhone, ownerEmail, meterNumber, waterSystemNotes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteGolfCart")]
		public int usp_DeleteGolfCart([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertGolfCart")]
		public int usp_InsertGolfCart([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="VarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="VarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Year", DbType="VarChar(50)")] string year, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Quanity", DbType="Int")] System.Nullable<int> quanity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsPaid", DbType="Bit")] System.Nullable<bool> isPaid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="Date")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, customer, fName, lName, year, quanity, isPaid, paymentDate, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateGolfCart")]
		public int usp_UdateGolfCart([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="VarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="VarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Year", DbType="VarChar(50)")] string year, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Quanity", DbType="Int")] System.Nullable<int> quanity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsPaid", DbType="Bit")] System.Nullable<bool> isPaid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="Date")] System.Nullable<System.DateTime> paymentDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, customer, fName, lName, year, quanity, isPaid, paymentDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertFacilityUsage")]
		public int usp_InsertFacilityUsage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] System.Nullable<int> relationshipId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsMember", DbType="Int")] System.Nullable<int> golfRoundsMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsGuest", DbType="Int")] System.Nullable<int> golfRoundsGuest, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolMember", DbType="Int")] System.Nullable<int> poolMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolGuest", DbType="Int")] System.Nullable<int> poolGuest, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, relationshipId, golfRoundsMember, golfRoundsGuest, poolMember, poolGuest, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertProperty")]
		public int usp_InsertProperty(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Section", DbType="Int")] System.Nullable<int> section, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Block", DbType="Int")] System.Nullable<int> block, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lot", DbType="Int")] System.Nullable<int> lot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubLot", DbType="VarChar(10)")] string subLot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="BillTo", DbType="VarChar(100)")] string billTo, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Balance", DbType="Decimal(19,4)")] System.Nullable<decimal> balance, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsInGoodStanding", DbType="Bit")] System.Nullable<bool> isInGoodStanding, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Parcel", DbType="VarChar(50)")] string parcel, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhysicalAddress", DbType="VarChar(50)")] string physicalAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="VarChar(10)")] string status, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerLName", DbType="VarChar(50)")] string ownerLName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerFName", DbType="VarChar(50)")] string ownerFName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerAddress", DbType="VarChar(50)")] string ownerAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerAddress2", DbType="VarChar(50)")] string ownerAddress2, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerCity", DbType="VarChar(50)")] string ownerCity, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerState", DbType="VarChar(4)")] string ownerState, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerZip", DbType="VarChar(20)")] string ownerZip, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerPrimaryPhone", DbType="VarChar(20)")] string ownerPrimaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerSecondaryPhone", DbType="VarChar(20)")] string ownerSecondaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerEmail", DbType="VarChar(50)")] string ownerEmail, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterNumber", DbType="Int")] System.Nullable<int> meterNumber, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="WaterSystemNotes", DbType="VarChar(250)")] string waterSystemNotes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer, section, block, lot, subLot, billTo, balance, isInGoodStanding, parcel, physicalAddress, status, ownerLName, ownerFName, ownerAddress, ownerAddress2, ownerCity, ownerState, ownerZip, ownerPrimaryPhone, ownerSecondaryPhone, ownerEmail, meterNumber, waterSystemNotes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertRelationship")]
		public int usp_InsertRelationship([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Active", DbType="Bit")] System.Nullable<bool> active, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="VarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="VarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationToOwner", DbType="VarChar(50)")] string relationToOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Photo", DbType="VarBinary(MAX)")] System.Data.Linq.Binary photo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] ref System.Nullable<int> relationshipId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), active, propertyId, fName, lName, relationToOwner, photo, relationshipId);
			relationshipId = ((System.Nullable<int>)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateRelationship")]
		public int usp_UdateRelationship([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] System.Nullable<int> relationshipId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Active", DbType="Bit")] System.Nullable<bool> active, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="VarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="VarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationToOwner", DbType="VarChar(50)")] string relationToOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Photo", DbType="VarBinary(MAX)")] System.Data.Linq.Binary photo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), relationshipId, active, propertyId, fName, lName, relationToOwner, photo);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetFacilityUsageForDate")]
		public ISingleResult<usp_GetFacilityUsageForDateResult> usp_GetFacilityUsageForDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipID", DbType="Int")] System.Nullable<int> relationshipID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Golf", DbType="Int")] System.Nullable<int> golf, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pool", DbType="Int")] System.Nullable<int> pool, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="DateTime")] System.Nullable<System.DateTime> date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="DateTime")] System.Nullable<System.DateTime> date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), relationshipID, golf, pool, date1, date2);
			return ((ISingleResult<usp_GetFacilityUsageForDateResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertWellMeterReading")]
		public int usp_InsertWellMeterReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WellNumber", DbType="Int")] System.Nullable<int> wellNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterReadingDate", DbType="DateTime")] System.Nullable<System.DateTime> meterReadingDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterReading", DbType="BigInt")] System.Nullable<long> meterReading, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterUnitOfMeasure", DbType="VarChar(20)")] string meterUnitOfMeasure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ThroughputInGallons", DbType="BigInt")] System.Nullable<long> throughputInGallons, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wellNumber, meterReadingDate, meterReading, meterUnitOfMeasure, throughputInGallons, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WaterMeterReadings")]
	public partial class WaterMeterReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _PropertyID;
		
		private System.Nullable<int> _MeterReading;
		
		private System.Nullable<System.DateTime> _ReadingDate;
		
		private System.Nullable<int> _Consumption;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnMeterReadingChanging(System.Nullable<int> value);
    partial void OnMeterReadingChanged();
    partial void OnReadingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReadingDateChanged();
    partial void OnConsumptionChanging(System.Nullable<int> value);
    partial void OnConsumptionChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public WaterMeterReading()
		{
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReading", DbType="Int")]
		public System.Nullable<int> MeterReading
		{
			get
			{
				return this._MeterReading;
			}
			set
			{
				if ((this._MeterReading != value))
				{
					this.OnMeterReadingChanging(value);
					this.SendPropertyChanging();
					this._MeterReading = value;
					this.SendPropertyChanged("MeterReading");
					this.OnMeterReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReadingDate
		{
			get
			{
				return this._ReadingDate;
			}
			set
			{
				if ((this._ReadingDate != value))
				{
					this.OnReadingDateChanging(value);
					this.SendPropertyChanging();
					this._ReadingDate = value;
					this.SendPropertyChanged("ReadingDate");
					this.OnReadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumption", DbType="Int")]
		public System.Nullable<int> Consumption
		{
			get
			{
				return this._Consumption;
			}
			set
			{
				if ((this._Consumption != value))
				{
					this.OnConsumptionChanging(value);
					this.SendPropertyChanging();
					this._Consumption = value;
					this.SendPropertyChanged("Consumption");
					this.OnConsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WaterMeterReading", Storage="_Property", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.WaterMeterReadings.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.WaterMeterReadings.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _PropertyID;
		
		private string _Comment;
		
		private string _EnteredBy;
		
		private System.DateTime _Entered;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnteredChanging(System.DateTime value);
    partial void OnEnteredChanged();
    #endregion
		
		public Note()
		{
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entered", DbType="DateTime NOT NULL")]
		public System.DateTime Entered
		{
			get
			{
				return this._Entered;
			}
			set
			{
				if ((this._Entered != value))
				{
					this.OnEnteredChanging(value);
					this.SendPropertyChanging();
					this._Entered = value;
					this.SendPropertyChanged("Entered");
					this.OnEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Note", Storage="_Property", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationDefaults")]
	public partial class ApplicationDefault : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private System.Data.Linq.Binary _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    #endregion
		
		public ApplicationDefault()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seasons")]
	public partial class Season
	{
		
		private int _RowID;
		
		private string _TimePeriod;
		
		private bool _IsCurrent;
		
		public Season()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this._RowID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePeriod", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TimePeriod
		{
			get
			{
				return this._TimePeriod;
			}
			set
			{
				if ((this._TimePeriod != value))
				{
					this._TimePeriod = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrent", DbType="Bit NOT NULL")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this._IsCurrent = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfCarts")]
	public partial class GolfCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _PropertyID;
		
		private string _Customer;
		
		private string _FName;
		
		private string _LName;
		
		private string _Year;
		
		private System.Nullable<int> _Quanity;
		
		private bool _IsPaid;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private System.DateTime _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnQuanityChanging(System.Nullable<int> value);
    partial void OnQuanityChanged();
    partial void OnIsPaidChanging(bool value);
    partial void OnIsPaidChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public GolfCart()
		{
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quanity", DbType="Int")]
		public System.Nullable<int> Quanity
		{
			get
			{
				return this._Quanity;
			}
			set
			{
				if ((this._Quanity != value))
				{
					this.OnQuanityChanging(value);
					this.SendPropertyChanging();
					this._Quanity = value;
					this.SendPropertyChanged("Quanity");
					this.OnQuanityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="Bit NOT NULL")]
		public bool IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="Date")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_GolfCart", Storage="_Property", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.GolfCarts.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.GolfCarts.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Properties")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyID;
		
		private string _Customer;
		
		private int _Section;
		
		private int _Block;
		
		private int _Lot;
		
		private string _SubLot;
		
		private string _BillTo;
		
		private System.Nullable<decimal> _Balance;
		
		private bool _IsInGoodStanding;
		
		private string _Parcel;
		
		private string _PhysicalAddress;
		
		private string _Status;
		
		private string _CommonNotes;
		
		private string _OwnerLName;
		
		private string _OwnerFName;
		
		private string _OwnerAddress;
		
		private string _OwnerAddress2;
		
		private string _OwnerCity;
		
		private string _OwnerState;
		
		private string _OwnerZip;
		
		private string _OwnerPrimaryPhone;
		
		private string _OwnerSecondaryPhone;
		
		private string _OwnerEmail;
		
		private System.Nullable<int> _MeterNumber;
		
		private string _WaterSystemNotes;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntitySet<WaterMeterReading> _WaterMeterReadings;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<GolfCart> _GolfCarts;
		
		private EntitySet<FacilityUsage> _FacilityUsages;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<WellXProperty> _WellXProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnSectionChanging(int value);
    partial void OnSectionChanged();
    partial void OnBlockChanging(int value);
    partial void OnBlockChanged();
    partial void OnLotChanging(int value);
    partial void OnLotChanged();
    partial void OnSubLotChanging(string value);
    partial void OnSubLotChanged();
    partial void OnBillToChanging(string value);
    partial void OnBillToChanged();
    partial void OnBalanceChanging(System.Nullable<decimal> value);
    partial void OnBalanceChanged();
    partial void OnIsInGoodStandingChanging(bool value);
    partial void OnIsInGoodStandingChanged();
    partial void OnParcelChanging(string value);
    partial void OnParcelChanged();
    partial void OnPhysicalAddressChanging(string value);
    partial void OnPhysicalAddressChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCommonNotesChanging(string value);
    partial void OnCommonNotesChanged();
    partial void OnOwnerLNameChanging(string value);
    partial void OnOwnerLNameChanged();
    partial void OnOwnerFNameChanging(string value);
    partial void OnOwnerFNameChanged();
    partial void OnOwnerAddressChanging(string value);
    partial void OnOwnerAddressChanged();
    partial void OnOwnerAddress2Changing(string value);
    partial void OnOwnerAddress2Changed();
    partial void OnOwnerCityChanging(string value);
    partial void OnOwnerCityChanged();
    partial void OnOwnerStateChanging(string value);
    partial void OnOwnerStateChanged();
    partial void OnOwnerZipChanging(string value);
    partial void OnOwnerZipChanged();
    partial void OnOwnerPrimaryPhoneChanging(string value);
    partial void OnOwnerPrimaryPhoneChanged();
    partial void OnOwnerSecondaryPhoneChanging(string value);
    partial void OnOwnerSecondaryPhoneChanged();
    partial void OnOwnerEmailChanging(string value);
    partial void OnOwnerEmailChanged();
    partial void OnMeterNumberChanging(System.Nullable<int> value);
    partial void OnMeterNumberChanged();
    partial void OnWaterSystemNotesChanging(string value);
    partial void OnWaterSystemNotesChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Property()
		{
			this._WaterMeterReadings = new EntitySet<WaterMeterReading>(new Action<WaterMeterReading>(this.attach_WaterMeterReadings), new Action<WaterMeterReading>(this.detach_WaterMeterReadings));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._GolfCarts = new EntitySet<GolfCart>(new Action<GolfCart>(this.attach_GolfCarts), new Action<GolfCart>(this.detach_GolfCarts));
			this._FacilityUsages = new EntitySet<FacilityUsage>(new Action<FacilityUsage>(this.attach_FacilityUsages), new Action<FacilityUsage>(this.detach_FacilityUsages));
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._WellXProperties = new EntitySet<WellXProperty>(new Action<WellXProperty>(this.attach_WellXProperties), new Action<WellXProperty>(this.detach_WellXProperties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="Int NOT NULL")]
		public int Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Block", DbType="Int NOT NULL")]
		public int Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this.OnBlockChanging(value);
					this.SendPropertyChanging();
					this._Block = value;
					this.SendPropertyChanged("Block");
					this.OnBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lot", DbType="Int NOT NULL")]
		public int Lot
		{
			get
			{
				return this._Lot;
			}
			set
			{
				if ((this._Lot != value))
				{
					this.OnLotChanging(value);
					this.SendPropertyChanging();
					this._Lot = value;
					this.SendPropertyChanged("Lot");
					this.OnLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLot", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubLot
		{
			get
			{
				return this._SubLot;
			}
			set
			{
				if ((this._SubLot != value))
				{
					this.OnSubLotChanging(value);
					this.SendPropertyChanging();
					this._SubLot = value;
					this.SendPropertyChanged("SubLot");
					this.OnSubLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillTo", DbType="VarChar(100)")]
		public string BillTo
		{
			get
			{
				return this._BillTo;
			}
			set
			{
				if ((this._BillTo != value))
				{
					this.OnBillToChanging(value);
					this.SendPropertyChanging();
					this._BillTo = value;
					this.SendPropertyChanged("BillTo");
					this.OnBillToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInGoodStanding", DbType="Bit NOT NULL")]
		public bool IsInGoodStanding
		{
			get
			{
				return this._IsInGoodStanding;
			}
			set
			{
				if ((this._IsInGoodStanding != value))
				{
					this.OnIsInGoodStandingChanging(value);
					this.SendPropertyChanging();
					this._IsInGoodStanding = value;
					this.SendPropertyChanged("IsInGoodStanding");
					this.OnIsInGoodStandingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parcel", DbType="VarChar(50)")]
		public string Parcel
		{
			get
			{
				return this._Parcel;
			}
			set
			{
				if ((this._Parcel != value))
				{
					this.OnParcelChanging(value);
					this.SendPropertyChanging();
					this._Parcel = value;
					this.SendPropertyChanged("Parcel");
					this.OnParcelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="VarChar(50)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this.OnPhysicalAddressChanging(value);
					this.SendPropertyChanging();
					this._PhysicalAddress = value;
					this.SendPropertyChanged("PhysicalAddress");
					this.OnPhysicalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(40)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonNotes", DbType="VarChar(400)")]
		public string CommonNotes
		{
			get
			{
				return this._CommonNotes;
			}
			set
			{
				if ((this._CommonNotes != value))
				{
					this.OnCommonNotesChanging(value);
					this.SendPropertyChanging();
					this._CommonNotes = value;
					this.SendPropertyChanged("CommonNotes");
					this.OnCommonNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerLName", DbType="VarChar(50)")]
		public string OwnerLName
		{
			get
			{
				return this._OwnerLName;
			}
			set
			{
				if ((this._OwnerLName != value))
				{
					this.OnOwnerLNameChanging(value);
					this.SendPropertyChanging();
					this._OwnerLName = value;
					this.SendPropertyChanged("OwnerLName");
					this.OnOwnerLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerFName", DbType="VarChar(50)")]
		public string OwnerFName
		{
			get
			{
				return this._OwnerFName;
			}
			set
			{
				if ((this._OwnerFName != value))
				{
					this.OnOwnerFNameChanging(value);
					this.SendPropertyChanging();
					this._OwnerFName = value;
					this.SendPropertyChanged("OwnerFName");
					this.OnOwnerFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAddress", DbType="VarChar(50)")]
		public string OwnerAddress
		{
			get
			{
				return this._OwnerAddress;
			}
			set
			{
				if ((this._OwnerAddress != value))
				{
					this.OnOwnerAddressChanging(value);
					this.SendPropertyChanging();
					this._OwnerAddress = value;
					this.SendPropertyChanged("OwnerAddress");
					this.OnOwnerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAddress2", DbType="VarChar(50)")]
		public string OwnerAddress2
		{
			get
			{
				return this._OwnerAddress2;
			}
			set
			{
				if ((this._OwnerAddress2 != value))
				{
					this.OnOwnerAddress2Changing(value);
					this.SendPropertyChanging();
					this._OwnerAddress2 = value;
					this.SendPropertyChanged("OwnerAddress2");
					this.OnOwnerAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerCity", DbType="VarChar(50)")]
		public string OwnerCity
		{
			get
			{
				return this._OwnerCity;
			}
			set
			{
				if ((this._OwnerCity != value))
				{
					this.OnOwnerCityChanging(value);
					this.SendPropertyChanging();
					this._OwnerCity = value;
					this.SendPropertyChanged("OwnerCity");
					this.OnOwnerCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerState", DbType="VarChar(4)")]
		public string OwnerState
		{
			get
			{
				return this._OwnerState;
			}
			set
			{
				if ((this._OwnerState != value))
				{
					this.OnOwnerStateChanging(value);
					this.SendPropertyChanging();
					this._OwnerState = value;
					this.SendPropertyChanged("OwnerState");
					this.OnOwnerStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerZip", DbType="VarChar(20)")]
		public string OwnerZip
		{
			get
			{
				return this._OwnerZip;
			}
			set
			{
				if ((this._OwnerZip != value))
				{
					this.OnOwnerZipChanging(value);
					this.SendPropertyChanging();
					this._OwnerZip = value;
					this.SendPropertyChanged("OwnerZip");
					this.OnOwnerZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPrimaryPhone", DbType="VarChar(20)")]
		public string OwnerPrimaryPhone
		{
			get
			{
				return this._OwnerPrimaryPhone;
			}
			set
			{
				if ((this._OwnerPrimaryPhone != value))
				{
					this.OnOwnerPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._OwnerPrimaryPhone = value;
					this.SendPropertyChanged("OwnerPrimaryPhone");
					this.OnOwnerPrimaryPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerSecondaryPhone", DbType="VarChar(20)")]
		public string OwnerSecondaryPhone
		{
			get
			{
				return this._OwnerSecondaryPhone;
			}
			set
			{
				if ((this._OwnerSecondaryPhone != value))
				{
					this.OnOwnerSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._OwnerSecondaryPhone = value;
					this.SendPropertyChanged("OwnerSecondaryPhone");
					this.OnOwnerSecondaryPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerEmail", DbType="VarChar(50)")]
		public string OwnerEmail
		{
			get
			{
				return this._OwnerEmail;
			}
			set
			{
				if ((this._OwnerEmail != value))
				{
					this.OnOwnerEmailChanging(value);
					this.SendPropertyChanging();
					this._OwnerEmail = value;
					this.SendPropertyChanged("OwnerEmail");
					this.OnOwnerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="Int")]
		public System.Nullable<int> MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this.OnMeterNumberChanging(value);
					this.SendPropertyChanging();
					this._MeterNumber = value;
					this.SendPropertyChanged("MeterNumber");
					this.OnMeterNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterSystemNotes", DbType="VarChar(250)")]
		public string WaterSystemNotes
		{
			get
			{
				return this._WaterSystemNotes;
			}
			set
			{
				if ((this._WaterSystemNotes != value))
				{
					this.OnWaterSystemNotesChanging(value);
					this.SendPropertyChanging();
					this._WaterSystemNotes = value;
					this.SendPropertyChanged("WaterSystemNotes");
					this.OnWaterSystemNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WaterMeterReading", Storage="_WaterMeterReadings", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<WaterMeterReading> WaterMeterReadings
		{
			get
			{
				return this._WaterMeterReadings;
			}
			set
			{
				this._WaterMeterReadings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Note", Storage="_Notes", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_GolfCart", Storage="_GolfCarts", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<GolfCart> GolfCarts
		{
			get
			{
				return this._GolfCarts;
			}
			set
			{
				this._GolfCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_FacilityUsage", Storage="_FacilityUsages", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<FacilityUsage> FacilityUsages
		{
			get
			{
				return this._FacilityUsages;
			}
			set
			{
				this._FacilityUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Relationship", Storage="_Relationships", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WellXProperty", Storage="_WellXProperties", ThisKey="PropertyID", OtherKey="PropertyId")]
		public EntitySet<WellXProperty> WellXProperties
		{
			get
			{
				return this._WellXProperties;
			}
			set
			{
				this._WellXProperties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WaterMeterReadings(WaterMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_WaterMeterReadings(WaterMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_GolfCarts(GolfCart entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_GolfCarts(GolfCart entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_FacilityUsages(FacilityUsage entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_FacilityUsages(FacilityUsage entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationPermissions")]
	public partial class ApplicationPermission
	{
		
		private int _RowId;
		
		private string _Role;
		
		private int _RoleIndex;
		
		private bool _CanViewProperty;
		
		private bool _CanEditPropertyInfo;
		
		private bool _CanViewPropertyNotes;
		
		private bool _CanEditPropertyNotes;
		
		private bool _CanViewOwnerInfo;
		
		private bool _CanEditOwnerInfo;
		
		private bool _CanChangeOwner;
		
		private bool _CanAddRelationship;
		
		private bool _CanUpdateRelationship;
		
		private bool _CanDeleteRelationship;
		
		private bool _CanCheckIn;
		
		private bool _CanViewWater;
		
		private bool _CanEditWater;
		
		private bool _CanViewGolfCart;
		
		private bool _CanEditGolfCart;
		
		private bool _CanImport;
		
		private bool _CanExport;
		
		private bool _CanPrint;
		
		private bool _CanViewAdministration;
		
		public ApplicationPermission()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this._RowId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this._Role = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleIndex", DbType="Int NOT NULL")]
		public int RoleIndex
		{
			get
			{
				return this._RoleIndex;
			}
			set
			{
				if ((this._RoleIndex != value))
				{
					this._RoleIndex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewProperty", DbType="Bit NOT NULL")]
		public bool CanViewProperty
		{
			get
			{
				return this._CanViewProperty;
			}
			set
			{
				if ((this._CanViewProperty != value))
				{
					this._CanViewProperty = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditPropertyInfo", DbType="Bit NOT NULL")]
		public bool CanEditPropertyInfo
		{
			get
			{
				return this._CanEditPropertyInfo;
			}
			set
			{
				if ((this._CanEditPropertyInfo != value))
				{
					this._CanEditPropertyInfo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewPropertyNotes", DbType="Bit NOT NULL")]
		public bool CanViewPropertyNotes
		{
			get
			{
				return this._CanViewPropertyNotes;
			}
			set
			{
				if ((this._CanViewPropertyNotes != value))
				{
					this._CanViewPropertyNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditPropertyNotes", DbType="Bit NOT NULL")]
		public bool CanEditPropertyNotes
		{
			get
			{
				return this._CanEditPropertyNotes;
			}
			set
			{
				if ((this._CanEditPropertyNotes != value))
				{
					this._CanEditPropertyNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewOwnerInfo", DbType="Bit NOT NULL")]
		public bool CanViewOwnerInfo
		{
			get
			{
				return this._CanViewOwnerInfo;
			}
			set
			{
				if ((this._CanViewOwnerInfo != value))
				{
					this._CanViewOwnerInfo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditOwnerInfo", DbType="Bit NOT NULL")]
		public bool CanEditOwnerInfo
		{
			get
			{
				return this._CanEditOwnerInfo;
			}
			set
			{
				if ((this._CanEditOwnerInfo != value))
				{
					this._CanEditOwnerInfo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanChangeOwner", DbType="Bit NOT NULL")]
		public bool CanChangeOwner
		{
			get
			{
				return this._CanChangeOwner;
			}
			set
			{
				if ((this._CanChangeOwner != value))
				{
					this._CanChangeOwner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanAddRelationship", DbType="Bit NOT NULL")]
		public bool CanAddRelationship
		{
			get
			{
				return this._CanAddRelationship;
			}
			set
			{
				if ((this._CanAddRelationship != value))
				{
					this._CanAddRelationship = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanUpdateRelationship", DbType="Bit NOT NULL")]
		public bool CanUpdateRelationship
		{
			get
			{
				return this._CanUpdateRelationship;
			}
			set
			{
				if ((this._CanUpdateRelationship != value))
				{
					this._CanUpdateRelationship = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDeleteRelationship", DbType="Bit NOT NULL")]
		public bool CanDeleteRelationship
		{
			get
			{
				return this._CanDeleteRelationship;
			}
			set
			{
				if ((this._CanDeleteRelationship != value))
				{
					this._CanDeleteRelationship = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanCheckIn", DbType="Bit NOT NULL")]
		public bool CanCheckIn
		{
			get
			{
				return this._CanCheckIn;
			}
			set
			{
				if ((this._CanCheckIn != value))
				{
					this._CanCheckIn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewWater", DbType="Bit NOT NULL")]
		public bool CanViewWater
		{
			get
			{
				return this._CanViewWater;
			}
			set
			{
				if ((this._CanViewWater != value))
				{
					this._CanViewWater = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditWater", DbType="Bit NOT NULL")]
		public bool CanEditWater
		{
			get
			{
				return this._CanEditWater;
			}
			set
			{
				if ((this._CanEditWater != value))
				{
					this._CanEditWater = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewGolfCart", DbType="Bit NOT NULL")]
		public bool CanViewGolfCart
		{
			get
			{
				return this._CanViewGolfCart;
			}
			set
			{
				if ((this._CanViewGolfCart != value))
				{
					this._CanViewGolfCart = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditGolfCart", DbType="Bit NOT NULL")]
		public bool CanEditGolfCart
		{
			get
			{
				return this._CanEditGolfCart;
			}
			set
			{
				if ((this._CanEditGolfCart != value))
				{
					this._CanEditGolfCart = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanImport", DbType="Bit NOT NULL")]
		public bool CanImport
		{
			get
			{
				return this._CanImport;
			}
			set
			{
				if ((this._CanImport != value))
				{
					this._CanImport = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanExport", DbType="Bit NOT NULL")]
		public bool CanExport
		{
			get
			{
				return this._CanExport;
			}
			set
			{
				if ((this._CanExport != value))
				{
					this._CanExport = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanPrint", DbType="Bit NOT NULL")]
		public bool CanPrint
		{
			get
			{
				return this._CanPrint;
			}
			set
			{
				if ((this._CanPrint != value))
				{
					this._CanPrint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewAdministration", DbType="Bit NOT NULL")]
		public bool CanViewAdministration
		{
			get
			{
				return this._CanViewAdministration;
			}
			set
			{
				if ((this._CanViewAdministration != value))
				{
					this._CanViewAdministration = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacilityUsages")]
	public partial class FacilityUsage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _PropertyID;
		
		private int _RelationshipId;
		
		private System.DateTime _Date;
		
		private int _GolfRoundsMember;
		
		private int _GolfRoundsGuest;
		
		private int _PoolMember;
		
		private int _PoolGuest;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Property> _Property;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnRelationshipIdChanging(int value);
    partial void OnRelationshipIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnGolfRoundsMemberChanging(int value);
    partial void OnGolfRoundsMemberChanged();
    partial void OnGolfRoundsGuestChanging(int value);
    partial void OnGolfRoundsGuestChanged();
    partial void OnPoolMemberChanging(int value);
    partial void OnPoolMemberChanged();
    partial void OnPoolGuestChanging(int value);
    partial void OnPoolGuestChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public FacilityUsage()
		{
			this._Property = default(EntityRef<Property>);
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", DbType="Int NOT NULL")]
		public int RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsMember", DbType="Int NOT NULL")]
		public int GolfRoundsMember
		{
			get
			{
				return this._GolfRoundsMember;
			}
			set
			{
				if ((this._GolfRoundsMember != value))
				{
					this.OnGolfRoundsMemberChanging(value);
					this.SendPropertyChanging();
					this._GolfRoundsMember = value;
					this.SendPropertyChanged("GolfRoundsMember");
					this.OnGolfRoundsMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsGuest", DbType="Int NOT NULL")]
		public int GolfRoundsGuest
		{
			get
			{
				return this._GolfRoundsGuest;
			}
			set
			{
				if ((this._GolfRoundsGuest != value))
				{
					this.OnGolfRoundsGuestChanging(value);
					this.SendPropertyChanging();
					this._GolfRoundsGuest = value;
					this.SendPropertyChanged("GolfRoundsGuest");
					this.OnGolfRoundsGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolMember", DbType="Int NOT NULL")]
		public int PoolMember
		{
			get
			{
				return this._PoolMember;
			}
			set
			{
				if ((this._PoolMember != value))
				{
					this.OnPoolMemberChanging(value);
					this.SendPropertyChanging();
					this._PoolMember = value;
					this.SendPropertyChanged("PoolMember");
					this.OnPoolMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolGuest", DbType="Int NOT NULL")]
		public int PoolGuest
		{
			get
			{
				return this._PoolGuest;
			}
			set
			{
				if ((this._PoolGuest != value))
				{
					this.OnPoolGuestChanging(value);
					this.SendPropertyChanging();
					this._PoolGuest = value;
					this.SendPropertyChanged("PoolGuest");
					this.OnPoolGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_FacilityUsage", Storage="_Property", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.FacilityUsages.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.FacilityUsages.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_FacilityUsage", Storage="_Relationship", ThisKey="RelationshipId", OtherKey="RelationshipID", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.FacilityUsages.Remove(this);
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.FacilityUsages.Add(this);
						this._RelationshipId = value.RelationshipID;
					}
					else
					{
						this._RelationshipId = default(int);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relationships")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipID;
		
		private System.Nullable<bool> _Active;
		
		private int _PropertyID;
		
		private string _FName;
		
		private string _LName;
		
		private string _RelationToOwner;
		
		private System.Data.Linq.Binary _Photo;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntitySet<FacilityUsage> _FacilityUsages;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIDChanging(int value);
    partial void OnRelationshipIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnRelationToOwnerChanging(string value);
    partial void OnRelationToOwnerChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Relationship()
		{
			this._FacilityUsages = new EntitySet<FacilityUsage>(new Action<FacilityUsage>(this.attach_FacilityUsages), new Action<FacilityUsage>(this.detach_FacilityUsages));
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					this.OnRelationshipIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipID = value;
					this.SendPropertyChanged("RelationshipID");
					this.OnRelationshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationToOwner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RelationToOwner
		{
			get
			{
				return this._RelationToOwner;
			}
			set
			{
				if ((this._RelationToOwner != value))
				{
					this.OnRelationToOwnerChanging(value);
					this.SendPropertyChanging();
					this._RelationToOwner = value;
					this.SendPropertyChanged("RelationToOwner");
					this.OnRelationToOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_FacilityUsage", Storage="_FacilityUsages", ThisKey="RelationshipID", OtherKey="RelationshipId")]
		public EntitySet<FacilityUsage> FacilityUsages
		{
			get
			{
				return this._FacilityUsages;
			}
			set
			{
				this._FacilityUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Relationship", Storage="_Property", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityUsages(FacilityUsage entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = this;
		}
		
		private void detach_FacilityUsages(FacilityUsage entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellXProperty")]
	public partial class WellXProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _WellNumber;
		
		private int _PropertyId;
		
		private EntityRef<Property> _Property;
		
		private EntityRef<WaterWell> _WaterWell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnWellNumberChanging(int value);
    partial void OnWellNumberChanged();
    partial void OnPropertyIdChanging(int value);
    partial void OnPropertyIdChanged();
    #endregion
		
		public WellXProperty()
		{
			this._Property = default(EntityRef<Property>);
			this._WaterWell = default(EntityRef<WaterWell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", DbType="Int NOT NULL")]
		public int WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					if (this._WaterWell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWellNumberChanging(value);
					this.SendPropertyChanging();
					this._WellNumber = value;
					this.SendPropertyChanged("WellNumber");
					this.OnWellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int NOT NULL")]
		public int PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WellXProperty", Storage="_Property", ThisKey="PropertyId", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.WellXProperties.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.WellXProperties.Add(this);
						this._PropertyId = value.PropertyID;
					}
					else
					{
						this._PropertyId = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellXProperty", Storage="_WaterWell", ThisKey="WellNumber", OtherKey="WellNumber", IsForeignKey=true)]
		public WaterWell WaterWell
		{
			get
			{
				return this._WaterWell.Entity;
			}
			set
			{
				WaterWell previousValue = this._WaterWell.Entity;
				if (((previousValue != value) 
							|| (this._WaterWell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WaterWell.Entity = null;
						previousValue.WellXProperties.Remove(this);
					}
					this._WaterWell.Entity = value;
					if ((value != null))
					{
						value.WellXProperties.Add(this);
						this._WellNumber = value.WellNumber;
					}
					else
					{
						this._WellNumber = default(int);
					}
					this.SendPropertyChanged("WaterWell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WaterWells")]
	public partial class WaterWell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellNumber;
		
		private string _ServiceArea;
		
		private string _MeterUnits;
		
		private decimal _UnitMultiplier;
		
		private EntitySet<WellXProperty> _WellXProperties;
		
		private EntitySet<WellMeterReading> _WellMeterReadings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellNumberChanging(int value);
    partial void OnWellNumberChanged();
    partial void OnServiceAreaChanging(string value);
    partial void OnServiceAreaChanged();
    partial void OnMeterUnitsChanging(string value);
    partial void OnMeterUnitsChanged();
    partial void OnUnitMultiplierChanging(decimal value);
    partial void OnUnitMultiplierChanged();
    #endregion
		
		public WaterWell()
		{
			this._WellXProperties = new EntitySet<WellXProperty>(new Action<WellXProperty>(this.attach_WellXProperties), new Action<WellXProperty>(this.detach_WellXProperties));
			this._WellMeterReadings = new EntitySet<WellMeterReading>(new Action<WellMeterReading>(this.attach_WellMeterReadings), new Action<WellMeterReading>(this.detach_WellMeterReadings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					this.OnWellNumberChanging(value);
					this.SendPropertyChanging();
					this._WellNumber = value;
					this.SendPropertyChanged("WellNumber");
					this.OnWellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceArea", DbType="VarChar(100)")]
		public string ServiceArea
		{
			get
			{
				return this._ServiceArea;
			}
			set
			{
				if ((this._ServiceArea != value))
				{
					this.OnServiceAreaChanging(value);
					this.SendPropertyChanging();
					this._ServiceArea = value;
					this.SendPropertyChanged("ServiceArea");
					this.OnServiceAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterUnits", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MeterUnits
		{
			get
			{
				return this._MeterUnits;
			}
			set
			{
				if ((this._MeterUnits != value))
				{
					this.OnMeterUnitsChanging(value);
					this.SendPropertyChanging();
					this._MeterUnits = value;
					this.SendPropertyChanged("MeterUnits");
					this.OnMeterUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitMultiplier", DbType="Decimal(5,2) NOT NULL")]
		public decimal UnitMultiplier
		{
			get
			{
				return this._UnitMultiplier;
			}
			set
			{
				if ((this._UnitMultiplier != value))
				{
					this.OnUnitMultiplierChanging(value);
					this.SendPropertyChanging();
					this._UnitMultiplier = value;
					this.SendPropertyChanged("UnitMultiplier");
					this.OnUnitMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellXProperty", Storage="_WellXProperties", ThisKey="WellNumber", OtherKey="WellNumber")]
		public EntitySet<WellXProperty> WellXProperties
		{
			get
			{
				return this._WellXProperties;
			}
			set
			{
				this._WellXProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellMeterReading", Storage="_WellMeterReadings", ThisKey="WellNumber", OtherKey="WellNumber")]
		public EntitySet<WellMeterReading> WellMeterReadings
		{
			get
			{
				return this._WellMeterReadings;
			}
			set
			{
				this._WellMeterReadings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = this;
		}
		
		private void detach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = null;
		}
		
		private void attach_WellMeterReadings(WellMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = this;
		}
		
		private void detach_WellMeterReadings(WellMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellMeterReadings")]
	public partial class WellMeterReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _WellNumber;
		
		private System.DateTime _MeterReadingDate;
		
		private System.Nullable<long> _MeterReading;
		
		private string _MeterUnitOfMeasure;
		
		private System.Nullable<long> _ThroughputInGallons;
		
		private string _EnteredBy;
		
		private System.DateTime _Entered;
		
		private EntityRef<WaterWell> _WaterWell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnWellNumberChanging(int value);
    partial void OnWellNumberChanged();
    partial void OnMeterReadingDateChanging(System.DateTime value);
    partial void OnMeterReadingDateChanged();
    partial void OnMeterReadingChanging(System.Nullable<long> value);
    partial void OnMeterReadingChanged();
    partial void OnMeterUnitOfMeasureChanging(string value);
    partial void OnMeterUnitOfMeasureChanged();
    partial void OnThroughputInGallonsChanging(System.Nullable<long> value);
    partial void OnThroughputInGallonsChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnteredChanging(System.DateTime value);
    partial void OnEnteredChanged();
    #endregion
		
		public WellMeterReading()
		{
			this._WaterWell = default(EntityRef<WaterWell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", DbType="Int NOT NULL")]
		public int WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					if (this._WaterWell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWellNumberChanging(value);
					this.SendPropertyChanging();
					this._WellNumber = value;
					this.SendPropertyChanged("WellNumber");
					this.OnWellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReadingDate", DbType="DateTime NOT NULL")]
		public System.DateTime MeterReadingDate
		{
			get
			{
				return this._MeterReadingDate;
			}
			set
			{
				if ((this._MeterReadingDate != value))
				{
					this.OnMeterReadingDateChanging(value);
					this.SendPropertyChanging();
					this._MeterReadingDate = value;
					this.SendPropertyChanged("MeterReadingDate");
					this.OnMeterReadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReading", DbType="BigInt")]
		public System.Nullable<long> MeterReading
		{
			get
			{
				return this._MeterReading;
			}
			set
			{
				if ((this._MeterReading != value))
				{
					this.OnMeterReadingChanging(value);
					this.SendPropertyChanging();
					this._MeterReading = value;
					this.SendPropertyChanged("MeterReading");
					this.OnMeterReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterUnitOfMeasure", DbType="VarChar(20)")]
		public string MeterUnitOfMeasure
		{
			get
			{
				return this._MeterUnitOfMeasure;
			}
			set
			{
				if ((this._MeterUnitOfMeasure != value))
				{
					this.OnMeterUnitOfMeasureChanging(value);
					this.SendPropertyChanging();
					this._MeterUnitOfMeasure = value;
					this.SendPropertyChanged("MeterUnitOfMeasure");
					this.OnMeterUnitOfMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThroughputInGallons", DbType="BigInt")]
		public System.Nullable<long> ThroughputInGallons
		{
			get
			{
				return this._ThroughputInGallons;
			}
			set
			{
				if ((this._ThroughputInGallons != value))
				{
					this.OnThroughputInGallonsChanging(value);
					this.SendPropertyChanging();
					this._ThroughputInGallons = value;
					this.SendPropertyChanged("ThroughputInGallons");
					this.OnThroughputInGallonsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entered", DbType="DateTime NOT NULL")]
		public System.DateTime Entered
		{
			get
			{
				return this._Entered;
			}
			set
			{
				if ((this._Entered != value))
				{
					this.OnEnteredChanging(value);
					this.SendPropertyChanging();
					this._Entered = value;
					this.SendPropertyChanged("Entered");
					this.OnEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellMeterReading", Storage="_WaterWell", ThisKey="WellNumber", OtherKey="WellNumber", IsForeignKey=true)]
		public WaterWell WaterWell
		{
			get
			{
				return this._WaterWell.Entity;
			}
			set
			{
				WaterWell previousValue = this._WaterWell.Entity;
				if (((previousValue != value) 
							|| (this._WaterWell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WaterWell.Entity = null;
						previousValue.WellMeterReadings.Remove(this);
					}
					this._WaterWell.Entity = value;
					if ((value != null))
					{
						value.WellMeterReadings.Add(this);
						this._WellNumber = value.WellNumber;
					}
					else
					{
						this._WellNumber = default(int);
					}
					this.SendPropertyChanged("WaterWell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class usp_GetPropertyByIdResult
	{
		
		private int _PropertyID;
		
		private string _Customer;
		
		private int _Section;
		
		private int _Block;
		
		private int _Lot;
		
		private string _SubLot;
		
		private string _BillTo;
		
		private decimal _Balance;
		
		private bool _IsInGoodStanding;
		
		private string _Parcel;
		
		private string _PhysicalAddress;
		
		private string _Status;
		
		private string _OwnerLName;
		
		private string _OwnerFName;
		
		private string _OwnerAddress;
		
		private string _OwnerAddress2;
		
		private string _OwnerCity;
		
		private string _OwnerState;
		
		private string _OwnerZip;
		
		private string _OwnerPrimaryPhone;
		
		private string _OwnerSecondaryPhone;
		
		private string _OwnerEmail;
		
		private System.Nullable<int> _MeterNumber;
		
		private string _PropertyNotes;
		
		private string _WaterSystemNotes;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		public usp_GetPropertyByIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="Int NOT NULL")]
		public int Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this._Section = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Block", DbType="Int NOT NULL")]
		public int Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this._Block = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lot", DbType="Int NOT NULL")]
		public int Lot
		{
			get
			{
				return this._Lot;
			}
			set
			{
				if ((this._Lot != value))
				{
					this._Lot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLot", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubLot
		{
			get
			{
				return this._SubLot;
			}
			set
			{
				if ((this._SubLot != value))
				{
					this._SubLot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillTo", DbType="VarChar(100)")]
		public string BillTo
		{
			get
			{
				return this._BillTo;
			}
			set
			{
				if ((this._BillTo != value))
				{
					this._BillTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInGoodStanding", DbType="Bit NOT NULL")]
		public bool IsInGoodStanding
		{
			get
			{
				return this._IsInGoodStanding;
			}
			set
			{
				if ((this._IsInGoodStanding != value))
				{
					this._IsInGoodStanding = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parcel", DbType="VarChar(50)")]
		public string Parcel
		{
			get
			{
				return this._Parcel;
			}
			set
			{
				if ((this._Parcel != value))
				{
					this._Parcel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="VarChar(50)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this._PhysicalAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerLName", DbType="VarChar(50)")]
		public string OwnerLName
		{
			get
			{
				return this._OwnerLName;
			}
			set
			{
				if ((this._OwnerLName != value))
				{
					this._OwnerLName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerFName", DbType="VarChar(50)")]
		public string OwnerFName
		{
			get
			{
				return this._OwnerFName;
			}
			set
			{
				if ((this._OwnerFName != value))
				{
					this._OwnerFName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAddress", DbType="VarChar(50)")]
		public string OwnerAddress
		{
			get
			{
				return this._OwnerAddress;
			}
			set
			{
				if ((this._OwnerAddress != value))
				{
					this._OwnerAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAddress2", DbType="VarChar(50)")]
		public string OwnerAddress2
		{
			get
			{
				return this._OwnerAddress2;
			}
			set
			{
				if ((this._OwnerAddress2 != value))
				{
					this._OwnerAddress2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerCity", DbType="VarChar(50)")]
		public string OwnerCity
		{
			get
			{
				return this._OwnerCity;
			}
			set
			{
				if ((this._OwnerCity != value))
				{
					this._OwnerCity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerState", DbType="VarChar(4)")]
		public string OwnerState
		{
			get
			{
				return this._OwnerState;
			}
			set
			{
				if ((this._OwnerState != value))
				{
					this._OwnerState = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerZip", DbType="VarChar(20)")]
		public string OwnerZip
		{
			get
			{
				return this._OwnerZip;
			}
			set
			{
				if ((this._OwnerZip != value))
				{
					this._OwnerZip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPrimaryPhone", DbType="VarChar(20)")]
		public string OwnerPrimaryPhone
		{
			get
			{
				return this._OwnerPrimaryPhone;
			}
			set
			{
				if ((this._OwnerPrimaryPhone != value))
				{
					this._OwnerPrimaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerSecondaryPhone", DbType="VarChar(20)")]
		public string OwnerSecondaryPhone
		{
			get
			{
				return this._OwnerSecondaryPhone;
			}
			set
			{
				if ((this._OwnerSecondaryPhone != value))
				{
					this._OwnerSecondaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerEmail", DbType="VarChar(50)")]
		public string OwnerEmail
		{
			get
			{
				return this._OwnerEmail;
			}
			set
			{
				if ((this._OwnerEmail != value))
				{
					this._OwnerEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="Int")]
		public System.Nullable<int> MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this._MeterNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNotes", DbType="VarChar(500)")]
		public string PropertyNotes
		{
			get
			{
				return this._PropertyNotes;
			}
			set
			{
				if ((this._PropertyNotes != value))
				{
					this._PropertyNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterSystemNotes", DbType="VarChar(250)")]
		public string WaterSystemNotes
		{
			get
			{
				return this._WaterSystemNotes;
			}
			set
			{
				if ((this._WaterSystemNotes != value))
				{
					this._WaterSystemNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this._LastModified = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this._LastModifiedBy = value;
				}
			}
		}
	}
	
	public partial class usp_GetFacilityUsageForDateResult
	{
		
		private int _RowID;
		
		private int _PropertyID;
		
		private int _RelationshipId;
		
		private System.DateTime _Date;
		
		private int _GolfRoundsMember;
		
		private int _GolfRoundsGuest;
		
		private int _PoolMember;
		
		private int _PoolGuest;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		public usp_GetFacilityUsageForDateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="Int NOT NULL")]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this._RowID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", DbType="Int NOT NULL")]
		public int RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this._RelationshipId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsMember", DbType="Int NOT NULL")]
		public int GolfRoundsMember
		{
			get
			{
				return this._GolfRoundsMember;
			}
			set
			{
				if ((this._GolfRoundsMember != value))
				{
					this._GolfRoundsMember = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsGuest", DbType="Int NOT NULL")]
		public int GolfRoundsGuest
		{
			get
			{
				return this._GolfRoundsGuest;
			}
			set
			{
				if ((this._GolfRoundsGuest != value))
				{
					this._GolfRoundsGuest = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolMember", DbType="Int NOT NULL")]
		public int PoolMember
		{
			get
			{
				return this._PoolMember;
			}
			set
			{
				if ((this._PoolMember != value))
				{
					this._PoolMember = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolGuest", DbType="Int NOT NULL")]
		public int PoolGuest
		{
			get
			{
				return this._PoolGuest;
			}
			set
			{
				if ((this._PoolGuest != value))
				{
					this._PoolGuest = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this._LastModified = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this._LastModifiedBy = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
