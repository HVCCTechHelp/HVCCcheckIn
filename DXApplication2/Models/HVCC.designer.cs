#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HVCC.Shell.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HVCC_DEV")]
	public partial class HVCCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWaterMeterReading(WaterMeterReading instance);
    partial void InsertApplicationDefault(ApplicationDefault instance);
    partial void UpdateApplicationDefault(ApplicationDefault instance);
    partial void DeleteApplicationDefault(ApplicationDefault instance);
    partial void InsertWellXProperty(WellXProperty instance);
    partial void UpdateWellXProperty(WellXProperty instance);
    partial void DeleteWellXProperty(WellXProperty instance);
    partial void InsertWaterWell(WaterWell instance);
    partial void UpdateWaterWell(WaterWell instance);
    partial void DeleteWaterWell(WaterWell instance);
    partial void UpdateWellMeterReading(WellMeterReading instance);
    partial void DeleteWellMeterReading(WellMeterReading instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void UpdateOwnershipChange(OwnershipChange instance);
    partial void DeleteOwnershipChange(OwnershipChange instance);
    partial void DeleteWaterShutoff(WaterShutoff instance);
    partial void InsertApplicationPermission(ApplicationPermission instance);
    partial void UpdateApplicationPermission(ApplicationPermission instance);
    partial void DeleteApplicationPermission(ApplicationPermission instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void DeleteGolfCart(GolfCart instance);
    partial void UpdateFacilityUsage(FacilityUsage instance);
    partial void DeleteFacilityUsage(FacilityUsage instance);
    partial void DeleteOwner(Owner instance);
    partial void UpdateLate90Day(Late90Day instance);
    partial void DeleteLate90Day(Late90Day instance);
    partial void UpdateLate60Day(Late60Day instance);
    partial void DeleteLate60Day(Late60Day instance);
    partial void UpdateLate30Day(Late30Day instance);
    partial void DeleteLate30Day(Late30Day instance);
    partial void UpdateNote(Note instance);
    partial void UpdateTransactionXNote(TransactionXNote instance);
    #endregion
		
		public HVCCDataContext() : 
				base(global::HVCC.Shell.Properties.Settings.Default.HVCCConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HVCCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WaterMeterReading> WaterMeterReadings
		{
			get
			{
				return this.GetTable<WaterMeterReading>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationDefault> ApplicationDefaults
		{
			get
			{
				return this.GetTable<ApplicationDefault>();
			}
		}
		
		public System.Data.Linq.Table<WellXProperty> WellXProperties
		{
			get
			{
				return this.GetTable<WellXProperty>();
			}
		}
		
		public System.Data.Linq.Table<WaterWell> WaterWells
		{
			get
			{
				return this.GetTable<WaterWell>();
			}
		}
		
		public System.Data.Linq.Table<WellMeterReading> WellMeterReadings
		{
			get
			{
				return this.GetTable<WellMeterReading>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<OwnershipChange> OwnershipChanges
		{
			get
			{
				return this.GetTable<OwnershipChange>();
			}
		}
		
		public System.Data.Linq.Table<WaterShutoff> WaterShutoffs
		{
			get
			{
				return this.GetTable<WaterShutoff>();
			}
		}
		
		public System.Data.Linq.Table<v_WaterShutoff> v_WaterShutoffs
		{
			get
			{
				return this.GetTable<v_WaterShutoff>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationPermission> ApplicationPermissions
		{
			get
			{
				return this.GetTable<ApplicationPermission>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<v_ActiveRelationship> v_ActiveRelationships
		{
			get
			{
				return this.GetTable<v_ActiveRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<v_PropertyDetail> v_PropertyDetails
		{
			get
			{
				return this.GetTable<v_PropertyDetail>();
			}
		}
		
		public System.Data.Linq.Table<GolfCart> GolfCarts
		{
			get
			{
				return this.GetTable<GolfCart>();
			}
		}
		
		public System.Data.Linq.Table<v_ChangeOfOwnership> v_ChangeOfOwnerships
		{
			get
			{
				return this.GetTable<v_ChangeOfOwnership>();
			}
		}
		
		public System.Data.Linq.Table<FacilityUsage> FacilityUsages
		{
			get
			{
				return this.GetTable<FacilityUsage>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<Late90Day> Late90Days
		{
			get
			{
				return this.GetTable<Late90Day>();
			}
		}
		
		public System.Data.Linq.Table<Late60Day> Late60Days
		{
			get
			{
				return this.GetTable<Late60Day>();
			}
		}
		
		public System.Data.Linq.Table<Late30Day> Late30Days
		{
			get
			{
				return this.GetTable<Late30Day>();
			}
		}
		
		public System.Data.Linq.Table<v_WaterMeterReading> v_WaterMeterReadings
		{
			get
			{
				return this.GetTable<v_WaterMeterReading>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<TransactionXNote> TransactionXNotes
		{
			get
			{
				return this.GetTable<TransactionXNote>();
			}
		}
		
		public System.Data.Linq.Table<v_OwnerDetail> v_OwnerDetails
		{
			get
			{
				return this.GetTable<v_OwnerDetail>();
			}
		}
		
		public System.Data.Linq.Table<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this.GetTable<FinancialTransaction>();
			}
		}
		
		private void UpdateWaterMeterReading(WaterMeterReading obj)
		{
			this.usp_UpdateWaterMeterReading(((System.Nullable<int>)(obj.RowID)), ((System.Nullable<int>)(obj.PropertyID)), ((System.Nullable<int>)(obj.MeterReading)), ((System.Nullable<int>)(obj.Consumption)), ((System.Nullable<System.DateTime>)(obj.ReadingDate)));
		}
		
		private void DeleteWaterMeterReading(WaterMeterReading obj)
		{
			this.usp_DeleteWaterMeterReading(((System.Nullable<int>)(obj.RowID)));
		}
		
		private void InsertWellMeterReading(WellMeterReading obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertWellMeterReading(((System.Nullable<int>)(obj.WellNumber)), ((System.Nullable<System.DateTime>)(obj.MeterReadingDate)), ((System.Nullable<long>)(obj.MeterReading)), obj.MeterUnitOfMeasure, ((System.Nullable<long>)(obj.ThroughputInGallons)), ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void InsertOwnershipChange(OwnershipChange obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertOwnershipChange(((System.Nullable<int>)(obj.PropertyID)), ((System.Nullable<int>)(obj.PreviousOwnerID)), obj.PreviousOwner, ((System.Nullable<int>)(obj.NewOwnerID)), obj.NewOwner, ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void InsertWaterShutoff(WaterShutoff obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertWaterShutoff(((System.Nullable<int>)(obj.OwnerID)), ((System.Nullable<bool>)(obj.IsWaterShutoff)), ((System.Nullable<bool>)(obj.IsMemberSuspended)), ((System.Nullable<System.DateTime>)(obj.SuspensionDate)), ((System.Nullable<bool>)(obj.IsLate30)), ((System.Nullable<System.DateTime>)(obj.FirstNotificationDate)), ((System.Nullable<bool>)(obj.IsLate60)), ((System.Nullable<System.DateTime>)(obj.SecondNotificationDate)), ((System.Nullable<bool>)(obj.IsLate90)), ((System.Nullable<bool>)(obj.IsShutoffNoticeIssued)), ((System.Nullable<System.DateTime>)(obj.ShutoffNoticeIssuedDate)), ((System.Nullable<bool>)(obj.IsMemberRequestedHearing)), ((System.Nullable<System.DateTime>)(obj.HearingDate)), ((System.Nullable<bool>)(obj.IsInCollections)), ((System.Nullable<System.DateTime>)(obj.CollectionsDate)), ((System.Nullable<bool>)(obj.IsMeterLocked)), ((System.Nullable<bool>)(obj.IsOnPaymentPlan)), obj.TermsOfPaymentPlan, ((System.Nullable<bool>)(obj.IsIntentToLien)), ((System.Nullable<System.DateTime>)(obj.IntentToLienDate)), ((System.Nullable<bool>)(obj.IsLienFiled)), ((System.Nullable<System.DateTime>)(obj.LienFiledDate)), ((System.Nullable<bool>)(obj.IsResolved)), ((System.Nullable<System.DateTime>)(obj.ResolutionDate)), obj.Resolution, ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void UpdateWaterShutoff(WaterShutoff obj)
		{
			this.usp_UpdateWaterShutoff(((System.Nullable<int>)(obj.OwnerID)), ((System.Nullable<bool>)(obj.IsWaterShutoff)), ((System.Nullable<bool>)(obj.IsMemberSuspended)), ((System.Nullable<System.DateTime>)(obj.SuspensionDate)), ((System.Nullable<bool>)(obj.IsLate30)), ((System.Nullable<System.DateTime>)(obj.FirstNotificationDate)), ((System.Nullable<bool>)(obj.IsLate60)), ((System.Nullable<System.DateTime>)(obj.SecondNotificationDate)), ((System.Nullable<bool>)(obj.IsLate90)), ((System.Nullable<bool>)(obj.IsShutoffNoticeIssued)), ((System.Nullable<System.DateTime>)(obj.ShutoffNoticeIssuedDate)), ((System.Nullable<bool>)(obj.IsMemberRequestedHearing)), ((System.Nullable<System.DateTime>)(obj.HearingDate)), ((System.Nullable<bool>)(obj.IsInCollections)), ((System.Nullable<System.DateTime>)(obj.CollectionsDate)), ((System.Nullable<bool>)(obj.IsMeterLocked)), ((System.Nullable<bool>)(obj.IsOnPaymentPlan)), obj.TermsOfPaymentPlan, ((System.Nullable<bool>)(obj.IsIntentToLien)), ((System.Nullable<System.DateTime>)(obj.IntentToLienDate)), ((System.Nullable<bool>)(obj.IsLienFiled)), ((System.Nullable<System.DateTime>)(obj.LienFiledDate)), ((System.Nullable<bool>)(obj.IsResolved)), ((System.Nullable<System.DateTime>)(obj.ResolutionDate)), obj.Resolution);
		}
		
		private void UpdateProperty(Property obj)
		{
			this.usp_UpdateProperty(((System.Nullable<int>)(obj.PropertyID)), ((System.Nullable<int>)(obj.OwnerID)), obj.Customer, ((System.Nullable<int>)(obj.Section)), ((System.Nullable<int>)(obj.Block)), ((System.Nullable<int>)(obj.Lot)), obj.SubLot, ((System.Nullable<decimal>)(obj.Balance)), obj.Parcel, obj.PhysicalAddress, obj.Status, obj.CommonNotes, ((System.Nullable<bool>)(obj.IsAssessment)), ((System.Nullable<int>)(obj.MeterNumber)), obj.WaterSystemNotes);
		}
		
		private void InsertGolfCart(GolfCart obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertGolfCart(((System.Nullable<int>)(obj.OwnerID)), obj.Customer, obj.Year, ((System.Nullable<int>)(obj.Quanity)), ((System.Nullable<bool>)(obj.IsPaid)), ((System.Nullable<System.DateTime>)(obj.PaymentDate)), ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void UpdateGolfCart(GolfCart obj)
		{
			this.usp_UdateGolfCart(((System.Nullable<int>)(obj.RowID)), ((System.Nullable<int>)(obj.OwnerID)), obj.Customer, obj.Year, ((System.Nullable<int>)(obj.Quanity)), ((System.Nullable<bool>)(obj.IsPaid)), ((System.Nullable<System.DateTime>)(obj.PaymentDate)), ((System.Nullable<bool>)(obj.IsReceived)), ((System.Nullable<System.DateTime>)(obj.ReceivedDate)));
		}
		
		private void InsertFacilityUsage(FacilityUsage obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertFacilityUsage(((System.Nullable<int>)(obj.OwnerID)), ((System.Nullable<int>)(obj.RelationshipId)), ((System.Nullable<int>)(obj.GolfRoundsMember)), ((System.Nullable<int>)(obj.GolfRoundsGuest)), ((System.Nullable<int>)(obj.PoolMember)), ((System.Nullable<int>)(obj.PoolGuest)), ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void InsertOwner(Owner obj)
		{
			System.Nullable<int> p1 = obj.OwnerID;
			this.usp_InsertOwner(obj.Customer, obj.MailTo, obj.Address, obj.Address2, obj.City, obj.State, obj.Zip, obj.PrimaryPhone, obj.SecondaryPhone, obj.EmailAddress, ((System.Nullable<bool>)(obj.IsSendByEmail)), ((System.Nullable<bool>)(obj.IsCurrentOwner)), ((System.Nullable<bool>)(obj.IsPrimaryRes)), ((System.Nullable<bool>)(obj.IsWeekend)), ((System.Nullable<bool>)(obj.IsSeasonal)), ((System.Nullable<bool>)(obj.IsRental)), ((System.Nullable<bool>)(obj.IsRVlot)), ((System.Nullable<bool>)(obj.IsEmptyLot)), ref p1);
			obj.OwnerID = p1.GetValueOrDefault();
		}
		
		private void UpdateOwner(Owner obj)
		{
			this.usp_UpdateOwner(((System.Nullable<int>)(obj.OwnerID)), obj.Customer, obj.MailTo, obj.Address, obj.Address2, obj.City, obj.State, obj.Zip, obj.PrimaryPhone, obj.SecondaryPhone, obj.EmailAddress, ((System.Nullable<bool>)(obj.IsSendByEmail)), ((System.Nullable<bool>)(obj.IsCurrentOwner)), ((System.Nullable<bool>)(obj.IsPrimaryRes)), ((System.Nullable<bool>)(obj.IsWeekend)), ((System.Nullable<bool>)(obj.IsSeasonal)), ((System.Nullable<bool>)(obj.IsRental)), ((System.Nullable<bool>)(obj.IsRVlot)), ((System.Nullable<bool>)(obj.IsEmptyLot)));
		}
		
		private void InsertLate90Day(Late90Day obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertLate90(((System.Nullable<int>)(obj.OwnerID)), obj.Season, ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void InsertLate60Day(Late60Day obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertLate60(((System.Nullable<int>)(obj.OwnerID)), obj.Season, ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void InsertLate30Day(Late30Day obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertLate30(((System.Nullable<int>)(obj.OwnerID)), obj.MailTo, obj.Season, ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void InsertNote(Note obj)
		{
			System.Nullable<int> p1 = obj.RowID;
			this.usp_InsertNote(((System.Nullable<int>)(obj.OwnerID)), obj.Comment, ref p1);
			obj.RowID = p1.GetValueOrDefault();
		}
		
		private void DeleteNote(Note obj)
		{
			this.usp_DeleteNote(((System.Nullable<int>)(obj.RowID)));
		}
		
		private void InsertTransactionXNote(TransactionXNote obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertTransactionXNote(((System.Nullable<int>)(obj.TransactionID)), ((System.Nullable<int>)(obj.NoteID)), ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void DeleteTransactionXNote(TransactionXNote obj)
		{
			this.usp_DeleteTransactionXNote(((System.Nullable<int>)(obj.RowId)));
		}
		
		private void InsertFinancialTransaction(FinancialTransaction obj)
		{
			System.Nullable<int> p1 = obj.RowId;
			this.usp_InsertFinancialTransaction(((System.Nullable<int>)(obj.OwnerID)), obj.FiscalYear, ((System.Nullable<decimal>)(obj.Balance)), ((System.Nullable<decimal>)(obj.CreditAmount)), ((System.Nullable<decimal>)(obj.DebitAmount)), ((System.Nullable<System.DateTime>)(obj.TransactionDate)), obj.TransactionMethod, obj.TransactionAppliesTo, obj.Comment, obj.CheckNumber, obj.ReceiptNumber, ref p1);
			obj.RowId = p1.GetValueOrDefault();
		}
		
		private void UpdateFinancialTransaction(FinancialTransaction obj)
		{
			this.usp_UpdateFinancialTransaction(((System.Nullable<int>)(obj.RowId)), ((System.Nullable<int>)(obj.OwnerID)), obj.FiscalYear, ((System.Nullable<decimal>)(obj.Balance)), ((System.Nullable<decimal>)(obj.CreditAmount)), ((System.Nullable<decimal>)(obj.DebitAmount)), ((System.Nullable<System.DateTime>)(obj.TransactionDate)), obj.TransactionMethod, obj.TransactionAppliesTo, obj.Comment, obj.CheckNumber, obj.ReceiptNumber);
		}
		
		private void DeleteFinancialTransaction(FinancialTransaction obj)
		{
			this.usp_DeleteFinancialTransaction(((System.Nullable<int>)(obj.RowId)));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetPropertyById")]
		public ISingleResult<usp_GetPropertyByIdResult> usp_GetPropertyById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyID", DbType="Int")] System.Nullable<int> propertyID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyID);
			return ((ISingleResult<usp_GetPropertyByIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteWaterMeterReading")]
		public int usp_DeleteWaterMeterReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateWaterMeterReading")]
		public int usp_UpdateWaterMeterReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterReading", DbType="Int")] System.Nullable<int> meterReading, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Consumption", DbType="Int")] System.Nullable<int> consumption, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReadingDate", DbType="Date")] System.Nullable<System.DateTime> readingDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId, propertyId, meterReading, consumption, readingDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteFacilityUsage")]
		public int usp_DeleteFacilityUsage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateFacilityUsage")]
		public int usp_UdateFacilityUsage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsMember", DbType="Int")] System.Nullable<int> golfRoundsMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsGuest", DbType="Int")] System.Nullable<int> golfRoundsGuest, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolMember", DbType="Int")] System.Nullable<int> poolMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolGuest", DbType="Int")] System.Nullable<int> poolGuest)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, golfRoundsMember, golfRoundsGuest, poolMember, poolGuest);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteNote")]
		public int usp_DeleteNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_IsMember", IsComposable=true)]
		public System.Nullable<bool> fn_IsMember([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="VarChar(MAX)")] string roleName)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleName).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetFacilityUsageForDate")]
		public ISingleResult<usp_GetFacilityUsageForDateResult> usp_GetFacilityUsageForDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipID", DbType="Int")] System.Nullable<int> relationshipID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Golf", DbType="Int")] System.Nullable<int> golf, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pool", DbType="Int")] System.Nullable<int> pool, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="DateTime")] System.Nullable<System.DateTime> date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="DateTime")] System.Nullable<System.DateTime> date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), relationshipID, golf, pool, date1, date2);
			return ((ISingleResult<usp_GetFacilityUsageForDateResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertWellMeterReading")]
		public int usp_InsertWellMeterReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WellNumber", DbType="Int")] System.Nullable<int> wellNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterReadingDate", DbType="DateTime")] System.Nullable<System.DateTime> meterReadingDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterReading", DbType="BigInt")] System.Nullable<long> meterReading, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterUnitOfMeasure", DbType="VarChar(20)")] string meterUnitOfMeasure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ThroughputInGallons", DbType="BigInt")] System.Nullable<long> throughputInGallons, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wellNumber, meterReadingDate, meterReading, meterUnitOfMeasure, throughputInGallons, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteRelationship")]
		public int usp_DeleteRelationship([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] System.Nullable<int> relationshipId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), relationshipId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertProperty")]
		public int usp_InsertProperty([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Section", DbType="Int")] System.Nullable<int> section, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Block", DbType="Int")] System.Nullable<int> block, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lot", DbType="Int")] System.Nullable<int> lot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubLot", DbType="VarChar(10)")] string subLot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BillTo", DbType="VarChar(100)")] string billTo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Balance", DbType="Decimal(19,4)")] System.Nullable<decimal> balance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsInGoodStanding", DbType="Bit")] System.Nullable<bool> isInGoodStanding, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Parcel", DbType="VarChar(50)")] string parcel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhysicalAddress", DbType="VarChar(50)")] string physicalAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="VarChar(10)")] string status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterNumber", DbType="Int")] System.Nullable<int> meterNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WaterSystemNotes", DbType="VarChar(250)")] string waterSystemNotes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer, section, block, lot, subLot, billTo, balance, isInGoodStanding, parcel, physicalAddress, status, meterNumber, waterSystemNotes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteRelationshipXOwner")]
		public int usp_DeleteRelationshipXOwner([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] System.Nullable<int> relationshipId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), relationshipId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertRelationship")]
		public int usp_InsertRelationship([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="VarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="VarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationToOwner", DbType="VarChar(50)")] string relationToOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Photo", DbType="VarBinary(MAX)")] System.Data.Linq.Binary photo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] ref System.Nullable<int> relationshipId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, fName, lName, relationToOwner, photo, relationshipId);
			relationshipId = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateRelationship")]
		public int usp_UdateRelationship([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] System.Nullable<int> relationshipId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="VarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="VarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationToOwner", DbType="VarChar(50)")] string relationToOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Photo", DbType="VarBinary(MAX)")] System.Data.Linq.Binary photo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), relationshipId, ownerID, fName, lName, relationToOwner, photo);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertOwnershipChange")]
		public int usp_InsertOwnershipChange([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PreviousOwnerID", DbType="Int")] System.Nullable<int> previousOwnerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PreviousOwner", DbType="VarChar(200)")] string previousOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewOwnerID", DbType="Int")] System.Nullable<int> newOwnerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewOwner", DbType="VarChar(200)")] string newOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, previousOwnerID, previousOwner, newOwnerID, newOwner, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertWaterShutoff")]
		public int usp_InsertWaterShutoff(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsWaterShutoff", DbType="Bit")] System.Nullable<bool> isWaterShutoff, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMemberSuspended", DbType="Bit")] System.Nullable<bool> isMemberSuspended, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SuspensionDate", DbType="Date")] System.Nullable<System.DateTime> suspensionDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLate30", DbType="Bit")] System.Nullable<bool> isLate30, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstNotificationDate", DbType="Date")] System.Nullable<System.DateTime> firstNotificationDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLate60", DbType="Bit")] System.Nullable<bool> isLate60, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SecondNotificationDate", DbType="Date")] System.Nullable<System.DateTime> secondNotificationDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLate90", DbType="Bit")] System.Nullable<bool> isLate90, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsShutoffNoticeIssued", DbType="Bit")] System.Nullable<bool> isShutoffNoticeIssued, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShutoffNoticeIssuedDate", DbType="Date")] System.Nullable<System.DateTime> shutoffNoticeIssuedDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMemberRequestedHearing", DbType="Bit")] System.Nullable<bool> isMemberRequestedHearing, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="HearingDate", DbType="Date")] System.Nullable<System.DateTime> hearingDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsInCollections", DbType="Bit")] System.Nullable<bool> isInCollections, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="CollectionsDate", DbType="Date")] System.Nullable<System.DateTime> collectionsDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMeterLocked", DbType="Bit")] System.Nullable<bool> isMeterLocked, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsOnPaymentPlan", DbType="Bit")] System.Nullable<bool> isOnPaymentPlan, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TermsOfPaymentPlan", DbType="VarChar(250)")] string termsOfPaymentPlan, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsIntentToLien", DbType="Bit")] System.Nullable<bool> isIntentToLien, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IntentToLienDate", DbType="Date")] System.Nullable<System.DateTime> intentToLienDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLienFiled", DbType="Bit")] System.Nullable<bool> isLienFiled, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="LienFiledDate", DbType="Date")] System.Nullable<System.DateTime> lienFiledDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsResolved", DbType="Bit")] System.Nullable<bool> isResolved, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ResolutionDate", DbType="Date")] System.Nullable<System.DateTime> resolutionDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Resolution", DbType="VarChar(500)")] string resolution, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, isWaterShutoff, isMemberSuspended, suspensionDate, isLate30, firstNotificationDate, isLate60, secondNotificationDate, isLate90, isShutoffNoticeIssued, shutoffNoticeIssuedDate, isMemberRequestedHearing, hearingDate, isInCollections, collectionsDate, isMeterLocked, isOnPaymentPlan, termsOfPaymentPlan, isIntentToLien, intentToLienDate, isLienFiled, lienFiledDate, isResolved, resolutionDate, resolution, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(25)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateWaterShutoff")]
		public int usp_UpdateWaterShutoff(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsWaterShutoff", DbType="Bit")] System.Nullable<bool> isWaterShutoff, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMemberSuspended", DbType="Bit")] System.Nullable<bool> isMemberSuspended, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SuspensionDate", DbType="Date")] System.Nullable<System.DateTime> suspensionDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLate30", DbType="Bit")] System.Nullable<bool> isLate30, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstNotificationDate", DbType="Date")] System.Nullable<System.DateTime> firstNotificationDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLate60", DbType="Bit")] System.Nullable<bool> isLate60, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SecondNotificationDate", DbType="Date")] System.Nullable<System.DateTime> secondNotificationDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLate90", DbType="Bit")] System.Nullable<bool> isLate90, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsShutoffNoticeIssued", DbType="Bit")] System.Nullable<bool> isShutoffNoticeIssued, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShutoffNoticeIssuedDate", DbType="Date")] System.Nullable<System.DateTime> shutoffNoticeIssuedDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMemberRequestedHearing", DbType="Bit")] System.Nullable<bool> isMemberRequestedHearing, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="HearingDate", DbType="Date")] System.Nullable<System.DateTime> hearingDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsInCollections", DbType="Bit")] System.Nullable<bool> isInCollections, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="CollectionsDate", DbType="Date")] System.Nullable<System.DateTime> collectionsDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMeterLocked", DbType="Bit")] System.Nullable<bool> isMeterLocked, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsOnPaymentPlan", DbType="Bit")] System.Nullable<bool> isOnPaymentPlan, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TermsOfPaymentPlan", DbType="VarChar(250)")] string termsOfPaymentPlan, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsIntentToLien", DbType="Bit")] System.Nullable<bool> isIntentToLien, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IntentToLienDate", DbType="Date")] System.Nullable<System.DateTime> intentToLienDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsLienFiled", DbType="Bit")] System.Nullable<bool> isLienFiled, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="LienFiledDate", DbType="Date")] System.Nullable<System.DateTime> lienFiledDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsResolved", DbType="Bit")] System.Nullable<bool> isResolved, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ResolutionDate", DbType="Date")] System.Nullable<System.DateTime> resolutionDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Resolution", DbType="VarChar(500)")] string resolution)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, isWaterShutoff, isMemberSuspended, suspensionDate, isLate30, firstNotificationDate, isLate60, secondNotificationDate, isLate90, isShutoffNoticeIssued, shutoffNoticeIssuedDate, isMemberRequestedHearing, hearingDate, isInCollections, collectionsDate, isMeterLocked, isOnPaymentPlan, termsOfPaymentPlan, isIntentToLien, intentToLienDate, isLienFiled, lienFiledDate, isResolved, resolutionDate, resolution);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateProperty")]
		public int usp_UpdateProperty([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Section", DbType="Int")] System.Nullable<int> section, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Block", DbType="Int")] System.Nullable<int> block, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lot", DbType="Int")] System.Nullable<int> lot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubLot", DbType="VarChar(10)")] string subLot, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Balance", DbType="Decimal(19,4)")] System.Nullable<decimal> balance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Parcel", DbType="VarChar(50)")] string parcel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhysicalAddress", DbType="VarChar(50)")] string physicalAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="VarChar(10)")] string status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CommonNotes", DbType="VarChar(400)")] string commonNotes, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAssessment", DbType="Bit")] System.Nullable<bool> isAssessment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeterNumber", DbType="Int")] System.Nullable<int> meterNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WaterSystemNotes", DbType="VarChar(250)")] string waterSystemNotes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId, ownerID, customer, section, block, lot, subLot, balance, parcel, physicalAddress, status, commonNotes, isAssessment, meterNumber, waterSystemNotes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetInvoiceForOwner")]
		public ISingleResult<usp_GetInvoiceForOwnerResult> usp_GetInvoiceForOwner([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID);
			return ((ISingleResult<usp_GetInvoiceForOwnerResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertGolfCart")]
		public int usp_InsertGolfCart([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Year", DbType="VarChar(50)")] string year, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Quanity", DbType="Int")] System.Nullable<int> quanity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsPaid", DbType="Bit")] System.Nullable<bool> isPaid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="Date")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, customer, year, quanity, isPaid, paymentDate, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UdateGolfCart")]
		public int usp_UdateGolfCart([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] System.Nullable<int> rowID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Year", DbType="VarChar(50)")] string year, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Quanity", DbType="Int")] System.Nullable<int> quanity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsPaid", DbType="Bit")] System.Nullable<bool> isPaid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="Date")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsReceived", DbType="Bit")] System.Nullable<bool> isReceived, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceivedDate", DbType="Date")] System.Nullable<System.DateTime> receivedDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowID, ownerID, customer, year, quanity, isPaid, paymentDate, isReceived, receivedDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertFacilityUsage")]
		public int usp_InsertFacilityUsage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RelationshipId", DbType="Int")] System.Nullable<int> relationshipId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsMember", DbType="Int")] System.Nullable<int> golfRoundsMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GolfRoundsGuest", DbType="Int")] System.Nullable<int> golfRoundsGuest, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolMember", DbType="Int")] System.Nullable<int> poolMember, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PoolGuest", DbType="Int")] System.Nullable<int> poolGuest, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, relationshipId, golfRoundsMember, golfRoundsGuest, poolMember, poolGuest, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertOwner")]
		public int usp_InsertOwner(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MailTo", DbType="VarChar(100)")] string mailTo, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="VarChar(50)")] string address, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address2", DbType="VarChar(50)")] string address2, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="State", DbType="VarChar(4)")] string state, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zip", DbType="VarChar(20)")] string zip, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PrimaryPhone", DbType="VarChar(20)")] string primaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SecondaryPhone", DbType="VarChar(20)")] string secondaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailAddress", DbType="VarChar(200)")] string emailAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsSendByEmail", DbType="Bit")] System.Nullable<bool> isSendByEmail, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsCurrentOwner", DbType="Bit")] System.Nullable<bool> isCurrentOwner, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsPrimaryRes", DbType="Bit")] System.Nullable<bool> isPrimaryRes, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsWeekend", DbType="Bit")] System.Nullable<bool> isWeekend, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsSeasonal", DbType="Bit")] System.Nullable<bool> isSeasonal, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRental", DbType="Bit")] System.Nullable<bool> isRental, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRVlot", DbType="Bit")] System.Nullable<bool> isRVlot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsEmptyLot", DbType="Bit")] System.Nullable<bool> isEmptyLot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] ref System.Nullable<int> ownerID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customer, mailTo, address, address2, city, state, zip, primaryPhone, secondaryPhone, emailAddress, isSendByEmail, isCurrentOwner, isPrimaryRes, isWeekend, isSeasonal, isRental, isRVlot, isEmptyLot, ownerID);
			ownerID = ((System.Nullable<int>)(result.GetParameterValue(18)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertLate90")]
		public int usp_InsertLate90([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Season", DbType="VarChar(20)")] string season, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, season, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertLate60")]
		public int usp_InsertLate60([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Season", DbType="VarChar(20)")] string season, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, season, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertLate30")]
		public int usp_InsertLate30([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MailTo", DbType="VarChar(100)")] string mailTo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Season", DbType="VarChar(20)")] string season, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, mailTo, season, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateOwner")]
		public int usp_UpdateOwner(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Customer", DbType="VarChar(50)")] string customer, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MailTo", DbType="VarChar(100)")] string mailTo, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="VarChar(50)")] string address, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address2", DbType="VarChar(50)")] string address2, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="State", DbType="VarChar(4)")] string state, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zip", DbType="VarChar(20)")] string zip, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PrimaryPhone", DbType="VarChar(20)")] string primaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SecondaryPhone", DbType="VarChar(20)")] string secondaryPhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailAddress", DbType="VarChar(200)")] string emailAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsSendByEmail", DbType="Bit")] System.Nullable<bool> isSendByEmail, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsCurrentOwner", DbType="Bit")] System.Nullable<bool> isCurrentOwner, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsPrimaryRes", DbType="Bit")] System.Nullable<bool> isPrimaryRes, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsWeekend", DbType="Bit")] System.Nullable<bool> isWeekend, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsSeasonal", DbType="Bit")] System.Nullable<bool> isSeasonal, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRental", DbType="Bit")] System.Nullable<bool> isRental, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRVlot", DbType="Bit")] System.Nullable<bool> isRVlot, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsEmptyLot", DbType="Bit")] System.Nullable<bool> isEmptyLot)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, customer, mailTo, address, address2, city, state, zip, primaryPhone, secondaryPhone, emailAddress, isSendByEmail, isCurrentOwner, isPrimaryRes, isWeekend, isSeasonal, isRental, isRVlot, isEmptyLot);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteFinancialTransaction")]
		public int usp_DeleteFinancialTransaction([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertNote")]
		public int usp_InsertNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(250)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, comment, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertTransactionXNote")]
		public int usp_InsertTransactionXNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionID", DbType="Int")] System.Nullable<int> transactionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NoteID", DbType="Int")] System.Nullable<int> noteID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), transactionID, noteID, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteTransactionXNote")]
		public int usp_DeleteTransactionXNote([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_InsertFinancialTransaction")]
		public int usp_InsertFinancialTransaction([global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FiscalYEar", DbType="VarChar(20)")] string fiscalYEar, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Balance", DbType="Money")] System.Nullable<decimal> balance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreditAmount", DbType="Money")] System.Nullable<decimal> creditAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DebitAmount", DbType="Money")] System.Nullable<decimal> debitAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionDate", DbType="Date")] System.Nullable<System.DateTime> transactionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionMethod", DbType="VarChar(50)")] string transactionMethod, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionAppliesTo", DbType="VarChar(100)")] string transactionAppliesTo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(100)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CheckNumber", DbType="VarChar(20)")] string checkNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiptNumber", DbType="VarChar(20)")] string receiptNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowID", DbType="Int")] ref System.Nullable<int> rowID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ownerID, fiscalYEar, balance, creditAmount, debitAmount, transactionDate, transactionMethod, transactionAppliesTo, comment, checkNumber, receiptNumber, rowID);
			rowID = ((System.Nullable<int>)(result.GetParameterValue(11)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateFinancialTransaction")]
		public int usp_UpdateFinancialTransaction([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowId", DbType="Int")] System.Nullable<int> rowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerID", DbType="Int")] System.Nullable<int> ownerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FiscalYear", DbType="VarChar(20)")] string fiscalYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Balance", DbType="Money")] System.Nullable<decimal> balance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CreditAmount", DbType="Money")] System.Nullable<decimal> creditAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DebitAmount", DbType="Money")] System.Nullable<decimal> debitAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionDate", DbType="DateTime")] System.Nullable<System.DateTime> transactionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionMethod", DbType="VarChar(50)")] string transactionMethod, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionAppliesTo", DbType="VarChar(100)")] string transactionAppliesTo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(100)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CheckNumber", DbType="VarChar(20)")] string checkNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiptNumber", DbType="VarChar(20)")] string receiptNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowId, ownerID, fiscalYear, balance, creditAmount, debitAmount, transactionDate, transactionMethod, transactionAppliesTo, comment, checkNumber, receiptNumber);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WaterMeterReadings")]
	public partial class WaterMeterReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _PropertyID;
		
		private System.Nullable<int> _MeterReading;
		
		private System.Nullable<System.DateTime> _ReadingDate;
		
		private System.Nullable<int> _Consumption;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnMeterReadingChanging(System.Nullable<int> value);
    partial void OnMeterReadingChanged();
    partial void OnReadingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReadingDateChanged();
    partial void OnConsumptionChanging(System.Nullable<int> value);
    partial void OnConsumptionChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public WaterMeterReading()
		{
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReading", DbType="Int")]
		public System.Nullable<int> MeterReading
		{
			get
			{
				return this._MeterReading;
			}
			set
			{
				if ((this._MeterReading != value))
				{
					this.OnMeterReadingChanging(value);
					this.SendPropertyChanging();
					this._MeterReading = value;
					this.SendPropertyChanged("MeterReading");
					this.OnMeterReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReadingDate
		{
			get
			{
				return this._ReadingDate;
			}
			set
			{
				if ((this._ReadingDate != value))
				{
					this.OnReadingDateChanging(value);
					this.SendPropertyChanging();
					this._ReadingDate = value;
					this.SendPropertyChanged("ReadingDate");
					this.OnReadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumption", DbType="Int")]
		public System.Nullable<int> Consumption
		{
			get
			{
				return this._Consumption;
			}
			set
			{
				if ((this._Consumption != value))
				{
					this.OnConsumptionChanging(value);
					this.SendPropertyChanging();
					this._Consumption = value;
					this.SendPropertyChanged("Consumption");
					this.OnConsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WaterMeterReading", Storage="_Property", ThisKey="PropertyID", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.WaterMeterReadings.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.WaterMeterReadings.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationDefaults")]
	public partial class ApplicationDefault : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private System.Data.Linq.Binary _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    #endregion
		
		public ApplicationDefault()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellXProperty")]
	public partial class WellXProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _WellNumber;
		
		private int _PropertyId;
		
		private EntityRef<WaterWell> _WaterWell;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnWellNumberChanging(int value);
    partial void OnWellNumberChanged();
    partial void OnPropertyIdChanging(int value);
    partial void OnPropertyIdChanged();
    #endregion
		
		public WellXProperty()
		{
			this._WaterWell = default(EntityRef<WaterWell>);
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", DbType="Int NOT NULL")]
		public int WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					if (this._WaterWell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWellNumberChanging(value);
					this.SendPropertyChanging();
					this._WellNumber = value;
					this.SendPropertyChanged("WellNumber");
					this.OnWellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int NOT NULL")]
		public int PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellXProperty", Storage="_WaterWell", ThisKey="WellNumber", OtherKey="WellNumber", IsForeignKey=true)]
		public WaterWell WaterWell
		{
			get
			{
				return this._WaterWell.Entity;
			}
			set
			{
				WaterWell previousValue = this._WaterWell.Entity;
				if (((previousValue != value) 
							|| (this._WaterWell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WaterWell.Entity = null;
						previousValue.WellXProperties.Remove(this);
					}
					this._WaterWell.Entity = value;
					if ((value != null))
					{
						value.WellXProperties.Add(this);
						this._WellNumber = value.WellNumber;
					}
					else
					{
						this._WellNumber = default(int);
					}
					this.SendPropertyChanged("WaterWell");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WellXProperty", Storage="_Property", ThisKey="PropertyId", OtherKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.WellXProperties.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.WellXProperties.Add(this);
						this._PropertyId = value.PropertyID;
					}
					else
					{
						this._PropertyId = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WaterWells")]
	public partial class WaterWell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellNumber;
		
		private string _ServiceArea;
		
		private string _MeterUnits;
		
		private decimal _UnitMultiplier;
		
		private EntitySet<WellXProperty> _WellXProperties;
		
		private EntitySet<WellMeterReading> _WellMeterReadings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellNumberChanging(int value);
    partial void OnWellNumberChanged();
    partial void OnServiceAreaChanging(string value);
    partial void OnServiceAreaChanged();
    partial void OnMeterUnitsChanging(string value);
    partial void OnMeterUnitsChanged();
    partial void OnUnitMultiplierChanging(decimal value);
    partial void OnUnitMultiplierChanged();
    #endregion
		
		public WaterWell()
		{
			this._WellXProperties = new EntitySet<WellXProperty>(new Action<WellXProperty>(this.attach_WellXProperties), new Action<WellXProperty>(this.detach_WellXProperties));
			this._WellMeterReadings = new EntitySet<WellMeterReading>(new Action<WellMeterReading>(this.attach_WellMeterReadings), new Action<WellMeterReading>(this.detach_WellMeterReadings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					this.OnWellNumberChanging(value);
					this.SendPropertyChanging();
					this._WellNumber = value;
					this.SendPropertyChanged("WellNumber");
					this.OnWellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceArea", DbType="VarChar(100)")]
		public string ServiceArea
		{
			get
			{
				return this._ServiceArea;
			}
			set
			{
				if ((this._ServiceArea != value))
				{
					this.OnServiceAreaChanging(value);
					this.SendPropertyChanging();
					this._ServiceArea = value;
					this.SendPropertyChanged("ServiceArea");
					this.OnServiceAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterUnits", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MeterUnits
		{
			get
			{
				return this._MeterUnits;
			}
			set
			{
				if ((this._MeterUnits != value))
				{
					this.OnMeterUnitsChanging(value);
					this.SendPropertyChanging();
					this._MeterUnits = value;
					this.SendPropertyChanged("MeterUnits");
					this.OnMeterUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitMultiplier", DbType="Decimal(5,2) NOT NULL")]
		public decimal UnitMultiplier
		{
			get
			{
				return this._UnitMultiplier;
			}
			set
			{
				if ((this._UnitMultiplier != value))
				{
					this.OnUnitMultiplierChanging(value);
					this.SendPropertyChanging();
					this._UnitMultiplier = value;
					this.SendPropertyChanged("UnitMultiplier");
					this.OnUnitMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellXProperty", Storage="_WellXProperties", ThisKey="WellNumber", OtherKey="WellNumber")]
		public EntitySet<WellXProperty> WellXProperties
		{
			get
			{
				return this._WellXProperties;
			}
			set
			{
				this._WellXProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellMeterReading", Storage="_WellMeterReadings", ThisKey="WellNumber", OtherKey="WellNumber")]
		public EntitySet<WellMeterReading> WellMeterReadings
		{
			get
			{
				return this._WellMeterReadings;
			}
			set
			{
				this._WellMeterReadings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = this;
		}
		
		private void detach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = null;
		}
		
		private void attach_WellMeterReadings(WellMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = this;
		}
		
		private void detach_WellMeterReadings(WellMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.WaterWell = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellMeterReadings")]
	public partial class WellMeterReading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _WellNumber;
		
		private System.DateTime _MeterReadingDate;
		
		private System.Nullable<long> _MeterReading;
		
		private string _MeterUnitOfMeasure;
		
		private System.Nullable<long> _ThroughputInGallons;
		
		private string _EnteredBy;
		
		private System.DateTime _Entered;
		
		private EntityRef<WaterWell> _WaterWell;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnWellNumberChanging(int value);
    partial void OnWellNumberChanged();
    partial void OnMeterReadingDateChanging(System.DateTime value);
    partial void OnMeterReadingDateChanged();
    partial void OnMeterReadingChanging(System.Nullable<long> value);
    partial void OnMeterReadingChanged();
    partial void OnMeterUnitOfMeasureChanging(string value);
    partial void OnMeterUnitOfMeasureChanged();
    partial void OnThroughputInGallonsChanging(System.Nullable<long> value);
    partial void OnThroughputInGallonsChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnteredChanging(System.DateTime value);
    partial void OnEnteredChanged();
    #endregion
		
		public WellMeterReading()
		{
			this._WaterWell = default(EntityRef<WaterWell>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", DbType="Int NOT NULL")]
		public int WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					if (this._WaterWell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWellNumberChanging(value);
					this.SendPropertyChanging();
					this._WellNumber = value;
					this.SendPropertyChanged("WellNumber");
					this.OnWellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReadingDate", DbType="DateTime NOT NULL")]
		public System.DateTime MeterReadingDate
		{
			get
			{
				return this._MeterReadingDate;
			}
			set
			{
				if ((this._MeterReadingDate != value))
				{
					this.OnMeterReadingDateChanging(value);
					this.SendPropertyChanging();
					this._MeterReadingDate = value;
					this.SendPropertyChanged("MeterReadingDate");
					this.OnMeterReadingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReading", DbType="BigInt")]
		public System.Nullable<long> MeterReading
		{
			get
			{
				return this._MeterReading;
			}
			set
			{
				if ((this._MeterReading != value))
				{
					this.OnMeterReadingChanging(value);
					this.SendPropertyChanging();
					this._MeterReading = value;
					this.SendPropertyChanged("MeterReading");
					this.OnMeterReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterUnitOfMeasure", DbType="VarChar(20)")]
		public string MeterUnitOfMeasure
		{
			get
			{
				return this._MeterUnitOfMeasure;
			}
			set
			{
				if ((this._MeterUnitOfMeasure != value))
				{
					this.OnMeterUnitOfMeasureChanging(value);
					this.SendPropertyChanging();
					this._MeterUnitOfMeasure = value;
					this.SendPropertyChanged("MeterUnitOfMeasure");
					this.OnMeterUnitOfMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThroughputInGallons", DbType="BigInt")]
		public System.Nullable<long> ThroughputInGallons
		{
			get
			{
				return this._ThroughputInGallons;
			}
			set
			{
				if ((this._ThroughputInGallons != value))
				{
					this.OnThroughputInGallonsChanging(value);
					this.SendPropertyChanging();
					this._ThroughputInGallons = value;
					this.SendPropertyChanged("ThroughputInGallons");
					this.OnThroughputInGallonsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entered", DbType="DateTime NOT NULL")]
		public System.DateTime Entered
		{
			get
			{
				return this._Entered;
			}
			set
			{
				if ((this._Entered != value))
				{
					this.OnEnteredChanging(value);
					this.SendPropertyChanging();
					this._Entered = value;
					this.SendPropertyChanged("Entered");
					this.OnEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WaterWell_WellMeterReading", Storage="_WaterWell", ThisKey="WellNumber", OtherKey="WellNumber", IsForeignKey=true)]
		public WaterWell WaterWell
		{
			get
			{
				return this._WaterWell.Entity;
			}
			set
			{
				WaterWell previousValue = this._WaterWell.Entity;
				if (((previousValue != value) 
							|| (this._WaterWell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WaterWell.Entity = null;
						previousValue.WellMeterReadings.Remove(this);
					}
					this._WaterWell.Entity = value;
					if ((value != null))
					{
						value.WellMeterReadings.Add(this);
						this._WellNumber = value.WellNumber;
					}
					else
					{
						this._WellNumber = default(int);
					}
					this.SendPropertyChanged("WaterWell");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relationships")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipID;
		
		private int _OwnerID;
		
		private string _FName;
		
		private string _LName;
		
		private string _RelationToOwner;
		
		private System.Data.Linq.Binary _Photo;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIDChanging(int value);
    partial void OnRelationshipIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnRelationToOwnerChanging(string value);
    partial void OnRelationToOwnerChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Relationship()
		{
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					this.OnRelationshipIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipID = value;
					this.SendPropertyChanged("RelationshipID");
					this.OnRelationshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationToOwner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RelationToOwner
		{
			get
			{
				return this._RelationToOwner;
			}
			set
			{
				if ((this._RelationToOwner != value))
				{
					this.OnRelationToOwnerChanging(value);
					this.SendPropertyChanging();
					this._RelationToOwner = value;
					this.SendPropertyChanged("RelationToOwner");
					this.OnRelationToOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Relationship", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnershipChanges")]
	public partial class OwnershipChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _PropertyID;
		
		private int _NewOwnerID;
		
		private string _NewOwner;
		
		private int _PreviousOwnerID;
		
		private string _PreviousOwner;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnNewOwnerIDChanging(int value);
    partial void OnNewOwnerIDChanged();
    partial void OnNewOwnerChanging(string value);
    partial void OnNewOwnerChanged();
    partial void OnPreviousOwnerIDChanging(int value);
    partial void OnPreviousOwnerIDChanged();
    partial void OnPreviousOwnerChanging(string value);
    partial void OnPreviousOwnerChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public OwnershipChange()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewOwnerID", DbType="Int NOT NULL")]
		public int NewOwnerID
		{
			get
			{
				return this._NewOwnerID;
			}
			set
			{
				if ((this._NewOwnerID != value))
				{
					this.OnNewOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._NewOwnerID = value;
					this.SendPropertyChanged("NewOwnerID");
					this.OnNewOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewOwner", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string NewOwner
		{
			get
			{
				return this._NewOwner;
			}
			set
			{
				if ((this._NewOwner != value))
				{
					this.OnNewOwnerChanging(value);
					this.SendPropertyChanging();
					this._NewOwner = value;
					this.SendPropertyChanged("NewOwner");
					this.OnNewOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousOwnerID", DbType="Int NOT NULL")]
		public int PreviousOwnerID
		{
			get
			{
				return this._PreviousOwnerID;
			}
			set
			{
				if ((this._PreviousOwnerID != value))
				{
					this.OnPreviousOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._PreviousOwnerID = value;
					this.SendPropertyChanged("PreviousOwnerID");
					this.OnPreviousOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousOwner", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string PreviousOwner
		{
			get
			{
				return this._PreviousOwner;
			}
			set
			{
				if ((this._PreviousOwner != value))
				{
					this.OnPreviousOwnerChanging(value);
					this.SendPropertyChanging();
					this._PreviousOwner = value;
					this.SendPropertyChanged("PreviousOwner");
					this.OnPreviousOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WaterShutoffs")]
	public partial class WaterShutoff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _OwnerID;
		
		private bool _IsWaterShutoff;
		
		private bool _IsMemberSuspended;
		
		private System.Nullable<System.DateTime> _SuspensionDate;
		
		private bool _IsLate30;
		
		private System.Nullable<System.DateTime> _FirstNotificationDate;
		
		private bool _IsLate60;
		
		private System.Nullable<System.DateTime> _SecondNotificationDate;
		
		private bool _IsLate90;
		
		private bool _IsShutoffNoticeIssued;
		
		private System.Nullable<System.DateTime> _ShutoffNoticeIssuedDate;
		
		private bool _IsMemberRequestedHearing;
		
		private System.Nullable<System.DateTime> _HearingDate;
		
		private bool _IsInCollections;
		
		private System.Nullable<System.DateTime> _CollectionsDate;
		
		private bool _IsMeterLocked;
		
		private bool _IsOnPaymentPlan;
		
		private string _TermsOfPaymentPlan;
		
		private bool _IsIntentToLien;
		
		private System.Nullable<System.DateTime> _IntentToLienDate;
		
		private bool _IsLienFiled;
		
		private System.Nullable<System.DateTime> _LienFiledDate;
		
		private bool _IsResolved;
		
		private System.Nullable<System.DateTime> _ResolutionDate;
		
		private string _Resolution;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnIsWaterShutoffChanging(bool value);
    partial void OnIsWaterShutoffChanged();
    partial void OnIsMemberSuspendedChanging(bool value);
    partial void OnIsMemberSuspendedChanged();
    partial void OnSuspensionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSuspensionDateChanged();
    partial void OnIsLate30Changing(bool value);
    partial void OnIsLate30Changed();
    partial void OnFirstNotificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstNotificationDateChanged();
    partial void OnIsLate60Changing(bool value);
    partial void OnIsLate60Changed();
    partial void OnSecondNotificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSecondNotificationDateChanged();
    partial void OnIsLate90Changing(bool value);
    partial void OnIsLate90Changed();
    partial void OnIsShutoffNoticeIssuedChanging(bool value);
    partial void OnIsShutoffNoticeIssuedChanged();
    partial void OnShutoffNoticeIssuedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShutoffNoticeIssuedDateChanged();
    partial void OnIsMemberRequestedHearingChanging(bool value);
    partial void OnIsMemberRequestedHearingChanged();
    partial void OnHearingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHearingDateChanged();
    partial void OnIsInCollectionsChanging(bool value);
    partial void OnIsInCollectionsChanged();
    partial void OnCollectionsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCollectionsDateChanged();
    partial void OnIsMeterLockedChanging(bool value);
    partial void OnIsMeterLockedChanged();
    partial void OnIsOnPaymentPlanChanging(bool value);
    partial void OnIsOnPaymentPlanChanged();
    partial void OnTermsOfPaymentPlanChanging(string value);
    partial void OnTermsOfPaymentPlanChanged();
    partial void OnIsIntentToLienChanging(bool value);
    partial void OnIsIntentToLienChanged();
    partial void OnIntentToLienDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIntentToLienDateChanged();
    partial void OnIsLienFiledChanging(bool value);
    partial void OnIsLienFiledChanged();
    partial void OnLienFiledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLienFiledDateChanged();
    partial void OnIsResolvedChanging(bool value);
    partial void OnIsResolvedChanged();
    partial void OnResolutionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolutionDateChanged();
    partial void OnResolutionChanging(string value);
    partial void OnResolutionChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public WaterShutoff()
		{
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWaterShutoff", DbType="Bit NOT NULL")]
		public bool IsWaterShutoff
		{
			get
			{
				return this._IsWaterShutoff;
			}
			set
			{
				if ((this._IsWaterShutoff != value))
				{
					this.OnIsWaterShutoffChanging(value);
					this.SendPropertyChanging();
					this._IsWaterShutoff = value;
					this.SendPropertyChanged("IsWaterShutoff");
					this.OnIsWaterShutoffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMemberSuspended", DbType="Bit NOT NULL")]
		public bool IsMemberSuspended
		{
			get
			{
				return this._IsMemberSuspended;
			}
			set
			{
				if ((this._IsMemberSuspended != value))
				{
					this.OnIsMemberSuspendedChanging(value);
					this.SendPropertyChanging();
					this._IsMemberSuspended = value;
					this.SendPropertyChanged("IsMemberSuspended");
					this.OnIsMemberSuspendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuspensionDate", DbType="Date")]
		public System.Nullable<System.DateTime> SuspensionDate
		{
			get
			{
				return this._SuspensionDate;
			}
			set
			{
				if ((this._SuspensionDate != value))
				{
					this.OnSuspensionDateChanging(value);
					this.SendPropertyChanging();
					this._SuspensionDate = value;
					this.SendPropertyChanged("SuspensionDate");
					this.OnSuspensionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate30", DbType="Bit NOT NULL")]
		public bool IsLate30
		{
			get
			{
				return this._IsLate30;
			}
			set
			{
				if ((this._IsLate30 != value))
				{
					this.OnIsLate30Changing(value);
					this.SendPropertyChanging();
					this._IsLate30 = value;
					this.SendPropertyChanged("IsLate30");
					this.OnIsLate30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstNotificationDate", DbType="Date")]
		public System.Nullable<System.DateTime> FirstNotificationDate
		{
			get
			{
				return this._FirstNotificationDate;
			}
			set
			{
				if ((this._FirstNotificationDate != value))
				{
					this.OnFirstNotificationDateChanging(value);
					this.SendPropertyChanging();
					this._FirstNotificationDate = value;
					this.SendPropertyChanged("FirstNotificationDate");
					this.OnFirstNotificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate60", DbType="Bit NOT NULL")]
		public bool IsLate60
		{
			get
			{
				return this._IsLate60;
			}
			set
			{
				if ((this._IsLate60 != value))
				{
					this.OnIsLate60Changing(value);
					this.SendPropertyChanging();
					this._IsLate60 = value;
					this.SendPropertyChanged("IsLate60");
					this.OnIsLate60Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondNotificationDate", DbType="Date")]
		public System.Nullable<System.DateTime> SecondNotificationDate
		{
			get
			{
				return this._SecondNotificationDate;
			}
			set
			{
				if ((this._SecondNotificationDate != value))
				{
					this.OnSecondNotificationDateChanging(value);
					this.SendPropertyChanging();
					this._SecondNotificationDate = value;
					this.SendPropertyChanged("SecondNotificationDate");
					this.OnSecondNotificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate90", DbType="Bit NOT NULL")]
		public bool IsLate90
		{
			get
			{
				return this._IsLate90;
			}
			set
			{
				if ((this._IsLate90 != value))
				{
					this.OnIsLate90Changing(value);
					this.SendPropertyChanging();
					this._IsLate90 = value;
					this.SendPropertyChanged("IsLate90");
					this.OnIsLate90Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsShutoffNoticeIssued", DbType="Bit NOT NULL")]
		public bool IsShutoffNoticeIssued
		{
			get
			{
				return this._IsShutoffNoticeIssued;
			}
			set
			{
				if ((this._IsShutoffNoticeIssued != value))
				{
					this.OnIsShutoffNoticeIssuedChanging(value);
					this.SendPropertyChanging();
					this._IsShutoffNoticeIssued = value;
					this.SendPropertyChanged("IsShutoffNoticeIssued");
					this.OnIsShutoffNoticeIssuedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShutoffNoticeIssuedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ShutoffNoticeIssuedDate
		{
			get
			{
				return this._ShutoffNoticeIssuedDate;
			}
			set
			{
				if ((this._ShutoffNoticeIssuedDate != value))
				{
					this.OnShutoffNoticeIssuedDateChanging(value);
					this.SendPropertyChanging();
					this._ShutoffNoticeIssuedDate = value;
					this.SendPropertyChanged("ShutoffNoticeIssuedDate");
					this.OnShutoffNoticeIssuedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMemberRequestedHearing", DbType="Bit NOT NULL")]
		public bool IsMemberRequestedHearing
		{
			get
			{
				return this._IsMemberRequestedHearing;
			}
			set
			{
				if ((this._IsMemberRequestedHearing != value))
				{
					this.OnIsMemberRequestedHearingChanging(value);
					this.SendPropertyChanging();
					this._IsMemberRequestedHearing = value;
					this.SendPropertyChanged("IsMemberRequestedHearing");
					this.OnIsMemberRequestedHearingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearingDate", DbType="Date")]
		public System.Nullable<System.DateTime> HearingDate
		{
			get
			{
				return this._HearingDate;
			}
			set
			{
				if ((this._HearingDate != value))
				{
					this.OnHearingDateChanging(value);
					this.SendPropertyChanging();
					this._HearingDate = value;
					this.SendPropertyChanged("HearingDate");
					this.OnHearingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInCollections", DbType="Bit NOT NULL")]
		public bool IsInCollections
		{
			get
			{
				return this._IsInCollections;
			}
			set
			{
				if ((this._IsInCollections != value))
				{
					this.OnIsInCollectionsChanging(value);
					this.SendPropertyChanging();
					this._IsInCollections = value;
					this.SendPropertyChanged("IsInCollections");
					this.OnIsInCollectionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionsDate", DbType="Date")]
		public System.Nullable<System.DateTime> CollectionsDate
		{
			get
			{
				return this._CollectionsDate;
			}
			set
			{
				if ((this._CollectionsDate != value))
				{
					this.OnCollectionsDateChanging(value);
					this.SendPropertyChanging();
					this._CollectionsDate = value;
					this.SendPropertyChanged("CollectionsDate");
					this.OnCollectionsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMeterLocked", DbType="Bit NOT NULL")]
		public bool IsMeterLocked
		{
			get
			{
				return this._IsMeterLocked;
			}
			set
			{
				if ((this._IsMeterLocked != value))
				{
					this.OnIsMeterLockedChanging(value);
					this.SendPropertyChanging();
					this._IsMeterLocked = value;
					this.SendPropertyChanged("IsMeterLocked");
					this.OnIsMeterLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnPaymentPlan", DbType="Bit NOT NULL")]
		public bool IsOnPaymentPlan
		{
			get
			{
				return this._IsOnPaymentPlan;
			}
			set
			{
				if ((this._IsOnPaymentPlan != value))
				{
					this.OnIsOnPaymentPlanChanging(value);
					this.SendPropertyChanging();
					this._IsOnPaymentPlan = value;
					this.SendPropertyChanged("IsOnPaymentPlan");
					this.OnIsOnPaymentPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermsOfPaymentPlan", DbType="VarChar(250)")]
		public string TermsOfPaymentPlan
		{
			get
			{
				return this._TermsOfPaymentPlan;
			}
			set
			{
				if ((this._TermsOfPaymentPlan != value))
				{
					this.OnTermsOfPaymentPlanChanging(value);
					this.SendPropertyChanging();
					this._TermsOfPaymentPlan = value;
					this.SendPropertyChanged("TermsOfPaymentPlan");
					this.OnTermsOfPaymentPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIntentToLien", DbType="Bit NOT NULL")]
		public bool IsIntentToLien
		{
			get
			{
				return this._IsIntentToLien;
			}
			set
			{
				if ((this._IsIntentToLien != value))
				{
					this.OnIsIntentToLienChanging(value);
					this.SendPropertyChanging();
					this._IsIntentToLien = value;
					this.SendPropertyChanged("IsIntentToLien");
					this.OnIsIntentToLienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentToLienDate", DbType="Date")]
		public System.Nullable<System.DateTime> IntentToLienDate
		{
			get
			{
				return this._IntentToLienDate;
			}
			set
			{
				if ((this._IntentToLienDate != value))
				{
					this.OnIntentToLienDateChanging(value);
					this.SendPropertyChanging();
					this._IntentToLienDate = value;
					this.SendPropertyChanged("IntentToLienDate");
					this.OnIntentToLienDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLienFiled", DbType="Bit NOT NULL")]
		public bool IsLienFiled
		{
			get
			{
				return this._IsLienFiled;
			}
			set
			{
				if ((this._IsLienFiled != value))
				{
					this.OnIsLienFiledChanging(value);
					this.SendPropertyChanging();
					this._IsLienFiled = value;
					this.SendPropertyChanged("IsLienFiled");
					this.OnIsLienFiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LienFiledDate", DbType="Date")]
		public System.Nullable<System.DateTime> LienFiledDate
		{
			get
			{
				return this._LienFiledDate;
			}
			set
			{
				if ((this._LienFiledDate != value))
				{
					this.OnLienFiledDateChanging(value);
					this.SendPropertyChanging();
					this._LienFiledDate = value;
					this.SendPropertyChanged("LienFiledDate");
					this.OnLienFiledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsResolved", DbType="Bit NOT NULL")]
		public bool IsResolved
		{
			get
			{
				return this._IsResolved;
			}
			set
			{
				if ((this._IsResolved != value))
				{
					this.OnIsResolvedChanging(value);
					this.SendPropertyChanging();
					this._IsResolved = value;
					this.SendPropertyChanged("IsResolved");
					this.OnIsResolvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ResolutionDate
		{
			get
			{
				return this._ResolutionDate;
			}
			set
			{
				if ((this._ResolutionDate != value))
				{
					this.OnResolutionDateChanging(value);
					this.SendPropertyChanging();
					this._ResolutionDate = value;
					this.SendPropertyChanged("ResolutionDate");
					this.OnResolutionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resolution", DbType="VarChar(500)")]
		public string Resolution
		{
			get
			{
				return this._Resolution;
			}
			set
			{
				if ((this._Resolution != value))
				{
					this.OnResolutionChanging(value);
					this.SendPropertyChanging();
					this._Resolution = value;
					this.SendPropertyChanged("Resolution");
					this.OnResolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_WaterShutoff", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.WaterShutoffs.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.WaterShutoffs.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_WaterShutoffs")]
	public partial class v_WaterShutoff
	{
		
		private int _OwnerID;
		
		private decimal _Balance;
		
		private System.Nullable<System.DateTime> _SuspensionDate;
		
		private bool _IsMeterLocked;
		
		private bool _IsLate30;
		
		private bool _IsLate60;
		
		private bool _IsLate90;
		
		private bool _IsOnPaymentPlan;
		
		private bool _IsInCollections;
		
		private bool _IsIntentToLien;
		
		private bool _IsLienFiled;
		
		private System.Nullable<System.DateTime> _FirstNotificationDate;
		
		private System.Nullable<System.DateTime> _SecondNotificationDate;
		
		private System.Nullable<System.DateTime> _ShutoffNoticeIssuedDate;
		
		private System.Nullable<System.DateTime> _LienFiledDate;
		
		private bool _IsWaterShutoff;
		
		private bool _IsMemberSuspended;
		
		private bool _IsShutoffNoticeIssued;
		
		private bool _IsMemberRequestedHearing;
		
		private System.Nullable<System.DateTime> _HearingDate;
		
		private System.Nullable<System.DateTime> _CollectionsDate;
		
		private string _TermsOfPaymentPlan;
		
		private System.Nullable<System.DateTime> _IntentToLienDate;
		
		private bool _IsResolved;
		
		private System.Nullable<System.DateTime> _ResolutionDate;
		
		private string _Resolution;
		
		private string _MailTo;
		
		private string _Customer;
		
		public v_WaterShutoff()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuspensionDate", DbType="Date")]
		public System.Nullable<System.DateTime> SuspensionDate
		{
			get
			{
				return this._SuspensionDate;
			}
			set
			{
				if ((this._SuspensionDate != value))
				{
					this._SuspensionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMeterLocked", DbType="Bit NOT NULL")]
		public bool IsMeterLocked
		{
			get
			{
				return this._IsMeterLocked;
			}
			set
			{
				if ((this._IsMeterLocked != value))
				{
					this._IsMeterLocked = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate30", DbType="Bit NOT NULL")]
		public bool IsLate30
		{
			get
			{
				return this._IsLate30;
			}
			set
			{
				if ((this._IsLate30 != value))
				{
					this._IsLate30 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate60", DbType="Bit NOT NULL")]
		public bool IsLate60
		{
			get
			{
				return this._IsLate60;
			}
			set
			{
				if ((this._IsLate60 != value))
				{
					this._IsLate60 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate90", DbType="Bit NOT NULL")]
		public bool IsLate90
		{
			get
			{
				return this._IsLate90;
			}
			set
			{
				if ((this._IsLate90 != value))
				{
					this._IsLate90 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnPaymentPlan", DbType="Bit NOT NULL")]
		public bool IsOnPaymentPlan
		{
			get
			{
				return this._IsOnPaymentPlan;
			}
			set
			{
				if ((this._IsOnPaymentPlan != value))
				{
					this._IsOnPaymentPlan = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInCollections", DbType="Bit NOT NULL")]
		public bool IsInCollections
		{
			get
			{
				return this._IsInCollections;
			}
			set
			{
				if ((this._IsInCollections != value))
				{
					this._IsInCollections = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIntentToLien", DbType="Bit NOT NULL")]
		public bool IsIntentToLien
		{
			get
			{
				return this._IsIntentToLien;
			}
			set
			{
				if ((this._IsIntentToLien != value))
				{
					this._IsIntentToLien = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLienFiled", DbType="Bit NOT NULL")]
		public bool IsLienFiled
		{
			get
			{
				return this._IsLienFiled;
			}
			set
			{
				if ((this._IsLienFiled != value))
				{
					this._IsLienFiled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstNotificationDate", DbType="Date")]
		public System.Nullable<System.DateTime> FirstNotificationDate
		{
			get
			{
				return this._FirstNotificationDate;
			}
			set
			{
				if ((this._FirstNotificationDate != value))
				{
					this._FirstNotificationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondNotificationDate", DbType="Date")]
		public System.Nullable<System.DateTime> SecondNotificationDate
		{
			get
			{
				return this._SecondNotificationDate;
			}
			set
			{
				if ((this._SecondNotificationDate != value))
				{
					this._SecondNotificationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShutoffNoticeIssuedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ShutoffNoticeIssuedDate
		{
			get
			{
				return this._ShutoffNoticeIssuedDate;
			}
			set
			{
				if ((this._ShutoffNoticeIssuedDate != value))
				{
					this._ShutoffNoticeIssuedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LienFiledDate", DbType="Date")]
		public System.Nullable<System.DateTime> LienFiledDate
		{
			get
			{
				return this._LienFiledDate;
			}
			set
			{
				if ((this._LienFiledDate != value))
				{
					this._LienFiledDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWaterShutoff", DbType="Bit NOT NULL")]
		public bool IsWaterShutoff
		{
			get
			{
				return this._IsWaterShutoff;
			}
			set
			{
				if ((this._IsWaterShutoff != value))
				{
					this._IsWaterShutoff = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMemberSuspended", DbType="Bit NOT NULL")]
		public bool IsMemberSuspended
		{
			get
			{
				return this._IsMemberSuspended;
			}
			set
			{
				if ((this._IsMemberSuspended != value))
				{
					this._IsMemberSuspended = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsShutoffNoticeIssued", DbType="Bit NOT NULL")]
		public bool IsShutoffNoticeIssued
		{
			get
			{
				return this._IsShutoffNoticeIssued;
			}
			set
			{
				if ((this._IsShutoffNoticeIssued != value))
				{
					this._IsShutoffNoticeIssued = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMemberRequestedHearing", DbType="Bit NOT NULL")]
		public bool IsMemberRequestedHearing
		{
			get
			{
				return this._IsMemberRequestedHearing;
			}
			set
			{
				if ((this._IsMemberRequestedHearing != value))
				{
					this._IsMemberRequestedHearing = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearingDate", DbType="Date")]
		public System.Nullable<System.DateTime> HearingDate
		{
			get
			{
				return this._HearingDate;
			}
			set
			{
				if ((this._HearingDate != value))
				{
					this._HearingDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionsDate", DbType="Date")]
		public System.Nullable<System.DateTime> CollectionsDate
		{
			get
			{
				return this._CollectionsDate;
			}
			set
			{
				if ((this._CollectionsDate != value))
				{
					this._CollectionsDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermsOfPaymentPlan", DbType="VarChar(250)")]
		public string TermsOfPaymentPlan
		{
			get
			{
				return this._TermsOfPaymentPlan;
			}
			set
			{
				if ((this._TermsOfPaymentPlan != value))
				{
					this._TermsOfPaymentPlan = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentToLienDate", DbType="Date")]
		public System.Nullable<System.DateTime> IntentToLienDate
		{
			get
			{
				return this._IntentToLienDate;
			}
			set
			{
				if ((this._IntentToLienDate != value))
				{
					this._IntentToLienDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsResolved", DbType="Bit NOT NULL")]
		public bool IsResolved
		{
			get
			{
				return this._IsResolved;
			}
			set
			{
				if ((this._IsResolved != value))
				{
					this._IsResolved = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ResolutionDate
		{
			get
			{
				return this._ResolutionDate;
			}
			set
			{
				if ((this._ResolutionDate != value))
				{
					this._ResolutionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resolution", DbType="VarChar(500)")]
		public string Resolution
		{
			get
			{
				return this._Resolution;
			}
			set
			{
				if ((this._Resolution != value))
				{
					this._Resolution = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this._MailTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationPermissions")]
	public partial class ApplicationPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private string _Role;
		
		private int _RoleIndex;
		
		private bool _CanViewProperty;
		
		private bool _CanEditProperty;
		
		private bool _CanViewOwner;
		
		private bool _CanEditOwner;
		
		private bool _CanViewOwnerNotes;
		
		private bool _CanEditOwnerNotes;
		
		private bool _CanAddRelationship;
		
		private bool _CanEditRelationship;
		
		private bool _CanCheckIn;
		
		private bool _CanViewWater;
		
		private bool _CanEditWater;
		
		private bool _CanImport;
		
		private bool _CanExport;
		
		private bool _CanPrint;
		
		private bool _CanViewAdministration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnRoleIndexChanging(int value);
    partial void OnRoleIndexChanged();
    partial void OnCanViewPropertyChanging(bool value);
    partial void OnCanViewPropertyChanged();
    partial void OnCanEditPropertyChanging(bool value);
    partial void OnCanEditPropertyChanged();
    partial void OnCanViewOwnerChanging(bool value);
    partial void OnCanViewOwnerChanged();
    partial void OnCanEditOwnerChanging(bool value);
    partial void OnCanEditOwnerChanged();
    partial void OnCanViewOwnerNotesChanging(bool value);
    partial void OnCanViewOwnerNotesChanged();
    partial void OnCanEditOwnerNotesChanging(bool value);
    partial void OnCanEditOwnerNotesChanged();
    partial void OnCanAddRelationshipChanging(bool value);
    partial void OnCanAddRelationshipChanged();
    partial void OnCanEditRelationshipChanging(bool value);
    partial void OnCanEditRelationshipChanged();
    partial void OnCanCheckInChanging(bool value);
    partial void OnCanCheckInChanged();
    partial void OnCanViewWaterChanging(bool value);
    partial void OnCanViewWaterChanged();
    partial void OnCanEditWaterChanging(bool value);
    partial void OnCanEditWaterChanged();
    partial void OnCanImportChanging(bool value);
    partial void OnCanImportChanged();
    partial void OnCanExportChanging(bool value);
    partial void OnCanExportChanged();
    partial void OnCanPrintChanging(bool value);
    partial void OnCanPrintChanged();
    partial void OnCanViewAdministrationChanging(bool value);
    partial void OnCanViewAdministrationChanged();
    #endregion
		
		public ApplicationPermission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleIndex", DbType="Int NOT NULL")]
		public int RoleIndex
		{
			get
			{
				return this._RoleIndex;
			}
			set
			{
				if ((this._RoleIndex != value))
				{
					this.OnRoleIndexChanging(value);
					this.SendPropertyChanging();
					this._RoleIndex = value;
					this.SendPropertyChanged("RoleIndex");
					this.OnRoleIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewProperty", DbType="Bit NOT NULL")]
		public bool CanViewProperty
		{
			get
			{
				return this._CanViewProperty;
			}
			set
			{
				if ((this._CanViewProperty != value))
				{
					this.OnCanViewPropertyChanging(value);
					this.SendPropertyChanging();
					this._CanViewProperty = value;
					this.SendPropertyChanged("CanViewProperty");
					this.OnCanViewPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditProperty", DbType="Bit NOT NULL")]
		public bool CanEditProperty
		{
			get
			{
				return this._CanEditProperty;
			}
			set
			{
				if ((this._CanEditProperty != value))
				{
					this.OnCanEditPropertyChanging(value);
					this.SendPropertyChanging();
					this._CanEditProperty = value;
					this.SendPropertyChanged("CanEditProperty");
					this.OnCanEditPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewOwner", DbType="Bit NOT NULL")]
		public bool CanViewOwner
		{
			get
			{
				return this._CanViewOwner;
			}
			set
			{
				if ((this._CanViewOwner != value))
				{
					this.OnCanViewOwnerChanging(value);
					this.SendPropertyChanging();
					this._CanViewOwner = value;
					this.SendPropertyChanged("CanViewOwner");
					this.OnCanViewOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditOwner", DbType="Bit NOT NULL")]
		public bool CanEditOwner
		{
			get
			{
				return this._CanEditOwner;
			}
			set
			{
				if ((this._CanEditOwner != value))
				{
					this.OnCanEditOwnerChanging(value);
					this.SendPropertyChanging();
					this._CanEditOwner = value;
					this.SendPropertyChanged("CanEditOwner");
					this.OnCanEditOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewOwnerNotes", DbType="Bit NOT NULL")]
		public bool CanViewOwnerNotes
		{
			get
			{
				return this._CanViewOwnerNotes;
			}
			set
			{
				if ((this._CanViewOwnerNotes != value))
				{
					this.OnCanViewOwnerNotesChanging(value);
					this.SendPropertyChanging();
					this._CanViewOwnerNotes = value;
					this.SendPropertyChanged("CanViewOwnerNotes");
					this.OnCanViewOwnerNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditOwnerNotes", DbType="Bit NOT NULL")]
		public bool CanEditOwnerNotes
		{
			get
			{
				return this._CanEditOwnerNotes;
			}
			set
			{
				if ((this._CanEditOwnerNotes != value))
				{
					this.OnCanEditOwnerNotesChanging(value);
					this.SendPropertyChanging();
					this._CanEditOwnerNotes = value;
					this.SendPropertyChanged("CanEditOwnerNotes");
					this.OnCanEditOwnerNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanAddRelationship", DbType="Bit NOT NULL")]
		public bool CanAddRelationship
		{
			get
			{
				return this._CanAddRelationship;
			}
			set
			{
				if ((this._CanAddRelationship != value))
				{
					this.OnCanAddRelationshipChanging(value);
					this.SendPropertyChanging();
					this._CanAddRelationship = value;
					this.SendPropertyChanged("CanAddRelationship");
					this.OnCanAddRelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditRelationship", DbType="Bit NOT NULL")]
		public bool CanEditRelationship
		{
			get
			{
				return this._CanEditRelationship;
			}
			set
			{
				if ((this._CanEditRelationship != value))
				{
					this.OnCanEditRelationshipChanging(value);
					this.SendPropertyChanging();
					this._CanEditRelationship = value;
					this.SendPropertyChanged("CanEditRelationship");
					this.OnCanEditRelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanCheckIn", DbType="Bit NOT NULL")]
		public bool CanCheckIn
		{
			get
			{
				return this._CanCheckIn;
			}
			set
			{
				if ((this._CanCheckIn != value))
				{
					this.OnCanCheckInChanging(value);
					this.SendPropertyChanging();
					this._CanCheckIn = value;
					this.SendPropertyChanged("CanCheckIn");
					this.OnCanCheckInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewWater", DbType="Bit NOT NULL")]
		public bool CanViewWater
		{
			get
			{
				return this._CanViewWater;
			}
			set
			{
				if ((this._CanViewWater != value))
				{
					this.OnCanViewWaterChanging(value);
					this.SendPropertyChanging();
					this._CanViewWater = value;
					this.SendPropertyChanged("CanViewWater");
					this.OnCanViewWaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEditWater", DbType="Bit NOT NULL")]
		public bool CanEditWater
		{
			get
			{
				return this._CanEditWater;
			}
			set
			{
				if ((this._CanEditWater != value))
				{
					this.OnCanEditWaterChanging(value);
					this.SendPropertyChanging();
					this._CanEditWater = value;
					this.SendPropertyChanged("CanEditWater");
					this.OnCanEditWaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanImport", DbType="Bit NOT NULL")]
		public bool CanImport
		{
			get
			{
				return this._CanImport;
			}
			set
			{
				if ((this._CanImport != value))
				{
					this.OnCanImportChanging(value);
					this.SendPropertyChanging();
					this._CanImport = value;
					this.SendPropertyChanged("CanImport");
					this.OnCanImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanExport", DbType="Bit NOT NULL")]
		public bool CanExport
		{
			get
			{
				return this._CanExport;
			}
			set
			{
				if ((this._CanExport != value))
				{
					this.OnCanExportChanging(value);
					this.SendPropertyChanging();
					this._CanExport = value;
					this.SendPropertyChanged("CanExport");
					this.OnCanExportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanPrint", DbType="Bit NOT NULL")]
		public bool CanPrint
		{
			get
			{
				return this._CanPrint;
			}
			set
			{
				if ((this._CanPrint != value))
				{
					this.OnCanPrintChanging(value);
					this.SendPropertyChanging();
					this._CanPrint = value;
					this.SendPropertyChanged("CanPrint");
					this.OnCanPrintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanViewAdministration", DbType="Bit NOT NULL")]
		public bool CanViewAdministration
		{
			get
			{
				return this._CanViewAdministration;
			}
			set
			{
				if ((this._CanViewAdministration != value))
				{
					this.OnCanViewAdministrationChanging(value);
					this.SendPropertyChanging();
					this._CanViewAdministration = value;
					this.SendPropertyChanged("CanViewAdministration");
					this.OnCanViewAdministrationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seasons")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private string _TimePeriod;
		
		private bool _IsCurrent;
		
		private bool _IsNext;
		
		private decimal _AnnualDues;
		
		private decimal _CartFee;
		
		private string _Assessment;
		
		private System.Nullable<decimal> _AssessmentAmount;
		
		private bool _IsDuesApplied;
		
		private bool _IsLate30Applied;
		
		private bool _IsLate60Applied;
		
		private bool _IsLate90Applied;
		
		private System.Nullable<bool> _IsVisible;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnTimePeriodChanging(string value);
    partial void OnTimePeriodChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    partial void OnIsNextChanging(bool value);
    partial void OnIsNextChanged();
    partial void OnAnnualDuesChanging(decimal value);
    partial void OnAnnualDuesChanged();
    partial void OnCartFeeChanging(decimal value);
    partial void OnCartFeeChanged();
    partial void OnAssessmentChanging(string value);
    partial void OnAssessmentChanged();
    partial void OnAssessmentAmountChanging(System.Nullable<decimal> value);
    partial void OnAssessmentAmountChanged();
    partial void OnIsDuesAppliedChanging(bool value);
    partial void OnIsDuesAppliedChanged();
    partial void OnIsLate30AppliedChanging(bool value);
    partial void OnIsLate30AppliedChanged();
    partial void OnIsLate60AppliedChanging(bool value);
    partial void OnIsLate60AppliedChanged();
    partial void OnIsLate90AppliedChanging(bool value);
    partial void OnIsLate90AppliedChanged();
    partial void OnIsVisibleChanging(System.Nullable<bool> value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public Season()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePeriod", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TimePeriod
		{
			get
			{
				return this._TimePeriod;
			}
			set
			{
				if ((this._TimePeriod != value))
				{
					this.OnTimePeriodChanging(value);
					this.SendPropertyChanging();
					this._TimePeriod = value;
					this.SendPropertyChanged("TimePeriod");
					this.OnTimePeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrent", DbType="Bit NOT NULL")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNext", DbType="Bit NOT NULL")]
		public bool IsNext
		{
			get
			{
				return this._IsNext;
			}
			set
			{
				if ((this._IsNext != value))
				{
					this.OnIsNextChanging(value);
					this.SendPropertyChanging();
					this._IsNext = value;
					this.SendPropertyChanged("IsNext");
					this.OnIsNextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnualDues", DbType="Money NOT NULL")]
		public decimal AnnualDues
		{
			get
			{
				return this._AnnualDues;
			}
			set
			{
				if ((this._AnnualDues != value))
				{
					this.OnAnnualDuesChanging(value);
					this.SendPropertyChanging();
					this._AnnualDues = value;
					this.SendPropertyChanged("AnnualDues");
					this.OnAnnualDuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartFee", DbType="Money NOT NULL")]
		public decimal CartFee
		{
			get
			{
				return this._CartFee;
			}
			set
			{
				if ((this._CartFee != value))
				{
					this.OnCartFeeChanging(value);
					this.SendPropertyChanging();
					this._CartFee = value;
					this.SendPropertyChanged("CartFee");
					this.OnCartFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assessment", DbType="VarChar(50)")]
		public string Assessment
		{
			get
			{
				return this._Assessment;
			}
			set
			{
				if ((this._Assessment != value))
				{
					this.OnAssessmentChanging(value);
					this.SendPropertyChanging();
					this._Assessment = value;
					this.SendPropertyChanged("Assessment");
					this.OnAssessmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentAmount", DbType="Money")]
		public System.Nullable<decimal> AssessmentAmount
		{
			get
			{
				return this._AssessmentAmount;
			}
			set
			{
				if ((this._AssessmentAmount != value))
				{
					this.OnAssessmentAmountChanging(value);
					this.SendPropertyChanging();
					this._AssessmentAmount = value;
					this.SendPropertyChanged("AssessmentAmount");
					this.OnAssessmentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDuesApplied", DbType="Bit NOT NULL")]
		public bool IsDuesApplied
		{
			get
			{
				return this._IsDuesApplied;
			}
			set
			{
				if ((this._IsDuesApplied != value))
				{
					this.OnIsDuesAppliedChanging(value);
					this.SendPropertyChanging();
					this._IsDuesApplied = value;
					this.SendPropertyChanged("IsDuesApplied");
					this.OnIsDuesAppliedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate30Applied", DbType="Bit NOT NULL")]
		public bool IsLate30Applied
		{
			get
			{
				return this._IsLate30Applied;
			}
			set
			{
				if ((this._IsLate30Applied != value))
				{
					this.OnIsLate30AppliedChanging(value);
					this.SendPropertyChanging();
					this._IsLate30Applied = value;
					this.SendPropertyChanged("IsLate30Applied");
					this.OnIsLate30AppliedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate60Applied", DbType="Bit NOT NULL")]
		public bool IsLate60Applied
		{
			get
			{
				return this._IsLate60Applied;
			}
			set
			{
				if ((this._IsLate60Applied != value))
				{
					this.OnIsLate60AppliedChanging(value);
					this.SendPropertyChanging();
					this._IsLate60Applied = value;
					this.SendPropertyChanged("IsLate60Applied");
					this.OnIsLate60AppliedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLate90Applied", DbType="Bit NOT NULL")]
		public bool IsLate90Applied
		{
			get
			{
				return this._IsLate90Applied;
			}
			set
			{
				if ((this._IsLate90Applied != value))
				{
					this.OnIsLate90AppliedChanging(value);
					this.SendPropertyChanging();
					this._IsLate90Applied = value;
					this.SendPropertyChanged("IsLate90Applied");
					this.OnIsLate90AppliedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit")]
		public System.Nullable<bool> IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_ActiveRelationships")]
	public partial class v_ActiveRelationship
	{
		
		private int _RelationshipID;
		
		private int _OwnerID;
		
		private string _FName;
		
		private string _LName;
		
		private string _RelationToOwner;
		
		private string _MailTo;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<bool> _IsCurrentOwner;
		
		public v_ActiveRelationship()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipID", DbType="Int NOT NULL")]
		public int RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					this._RelationshipID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this._FName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this._LName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationToOwner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RelationToOwner
		{
			get
			{
				return this._RelationToOwner;
			}
			set
			{
				if ((this._RelationToOwner != value))
				{
					this._RelationToOwner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this._MailTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentOwner", DbType="Bit")]
		public System.Nullable<bool> IsCurrentOwner
		{
			get
			{
				return this._IsCurrentOwner;
			}
			set
			{
				if ((this._IsCurrentOwner != value))
				{
					this._IsCurrentOwner = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Properties")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyID;
		
		private int _OwnerID;
		
		private string _Customer;
		
		private int _Section;
		
		private int _Block;
		
		private int _Lot;
		
		private string _SubLot;
		
		private System.Nullable<decimal> _Balance;
		
		private string _Parcel;
		
		private string _PhysicalAddress;
		
		private string _Status;
		
		private string _CommonNotes;
		
		private bool _IsAssessment;
		
		private System.Nullable<int> _MeterNumber;
		
		private string _WaterSystemNotes;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntitySet<WaterMeterReading> _WaterMeterReadings;
		
		private EntitySet<WellXProperty> _WellXProperties;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnSectionChanging(int value);
    partial void OnSectionChanged();
    partial void OnBlockChanging(int value);
    partial void OnBlockChanged();
    partial void OnLotChanging(int value);
    partial void OnLotChanged();
    partial void OnSubLotChanging(string value);
    partial void OnSubLotChanged();
    partial void OnBalanceChanging(System.Nullable<decimal> value);
    partial void OnBalanceChanged();
    partial void OnParcelChanging(string value);
    partial void OnParcelChanged();
    partial void OnPhysicalAddressChanging(string value);
    partial void OnPhysicalAddressChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCommonNotesChanging(string value);
    partial void OnCommonNotesChanged();
    partial void OnIsAssessmentChanging(bool value);
    partial void OnIsAssessmentChanged();
    partial void OnMeterNumberChanging(System.Nullable<int> value);
    partial void OnMeterNumberChanged();
    partial void OnWaterSystemNotesChanging(string value);
    partial void OnWaterSystemNotesChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Property()
		{
			this._WaterMeterReadings = new EntitySet<WaterMeterReading>(new Action<WaterMeterReading>(this.attach_WaterMeterReadings), new Action<WaterMeterReading>(this.detach_WaterMeterReadings));
			this._WellXProperties = new EntitySet<WellXProperty>(new Action<WellXProperty>(this.attach_WellXProperties), new Action<WellXProperty>(this.detach_WellXProperties));
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="Int NOT NULL")]
		public int Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Block", DbType="Int NOT NULL")]
		public int Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this.OnBlockChanging(value);
					this.SendPropertyChanging();
					this._Block = value;
					this.SendPropertyChanged("Block");
					this.OnBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lot", DbType="Int NOT NULL")]
		public int Lot
		{
			get
			{
				return this._Lot;
			}
			set
			{
				if ((this._Lot != value))
				{
					this.OnLotChanging(value);
					this.SendPropertyChanging();
					this._Lot = value;
					this.SendPropertyChanged("Lot");
					this.OnLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLot", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubLot
		{
			get
			{
				return this._SubLot;
			}
			set
			{
				if ((this._SubLot != value))
				{
					this.OnSubLotChanging(value);
					this.SendPropertyChanging();
					this._SubLot = value;
					this.SendPropertyChanged("SubLot");
					this.OnSubLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parcel", DbType="VarChar(50)")]
		public string Parcel
		{
			get
			{
				return this._Parcel;
			}
			set
			{
				if ((this._Parcel != value))
				{
					this.OnParcelChanging(value);
					this.SendPropertyChanging();
					this._Parcel = value;
					this.SendPropertyChanged("Parcel");
					this.OnParcelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="VarChar(50)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this.OnPhysicalAddressChanging(value);
					this.SendPropertyChanging();
					this._PhysicalAddress = value;
					this.SendPropertyChanged("PhysicalAddress");
					this.OnPhysicalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(40)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonNotes", DbType="VarChar(400)")]
		public string CommonNotes
		{
			get
			{
				return this._CommonNotes;
			}
			set
			{
				if ((this._CommonNotes != value))
				{
					this.OnCommonNotesChanging(value);
					this.SendPropertyChanging();
					this._CommonNotes = value;
					this.SendPropertyChanged("CommonNotes");
					this.OnCommonNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAssessment", DbType="Bit NOT NULL")]
		public bool IsAssessment
		{
			get
			{
				return this._IsAssessment;
			}
			set
			{
				if ((this._IsAssessment != value))
				{
					this.OnIsAssessmentChanging(value);
					this.SendPropertyChanging();
					this._IsAssessment = value;
					this.SendPropertyChanged("IsAssessment");
					this.OnIsAssessmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="Int")]
		public System.Nullable<int> MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this.OnMeterNumberChanging(value);
					this.SendPropertyChanging();
					this._MeterNumber = value;
					this.SendPropertyChanged("MeterNumber");
					this.OnMeterNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterSystemNotes", DbType="VarChar(250)")]
		public string WaterSystemNotes
		{
			get
			{
				return this._WaterSystemNotes;
			}
			set
			{
				if ((this._WaterSystemNotes != value))
				{
					this.OnWaterSystemNotesChanging(value);
					this.SendPropertyChanging();
					this._WaterSystemNotes = value;
					this.SendPropertyChanged("WaterSystemNotes");
					this.OnWaterSystemNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WaterMeterReading", Storage="_WaterMeterReadings", ThisKey="PropertyID", OtherKey="PropertyID")]
		public EntitySet<WaterMeterReading> WaterMeterReadings
		{
			get
			{
				return this._WaterMeterReadings;
			}
			set
			{
				this._WaterMeterReadings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_WellXProperty", Storage="_WellXProperties", ThisKey="PropertyID", OtherKey="PropertyId")]
		public EntitySet<WellXProperty> WellXProperties
		{
			get
			{
				return this._WellXProperties;
			}
			set
			{
				this._WellXProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Property", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WaterMeterReadings(WaterMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_WaterMeterReadings(WaterMeterReading entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_WellXProperties(WellXProperty entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_PropertyDetails")]
	public partial class v_PropertyDetail
	{
		
		private int _PropertyID;
		
		private int _OwnerID;
		
		private string _Customer;
		
		private int _Section;
		
		private int _Block;
		
		private int _Lot;
		
		private string _SubLot;
		
		private System.Nullable<decimal> _Balance;
		
		private string _Parcel;
		
		private string _PhysicalAddress;
		
		private string _Status;
		
		private string _CommonNotes;
		
		private bool _IsAssessment;
		
		private System.Nullable<int> _MeterNumber;
		
		private string _WaterSystemNotes;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private decimal _OwnerBalance;
		
		private string _MailTo;
		
		private string _Address;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _EmailAddress;
		
		private bool _IsSendByEmail;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		public v_PropertyDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="Int NOT NULL")]
		public int Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this._Section = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Block", DbType="Int NOT NULL")]
		public int Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this._Block = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lot", DbType="Int NOT NULL")]
		public int Lot
		{
			get
			{
				return this._Lot;
			}
			set
			{
				if ((this._Lot != value))
				{
					this._Lot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLot", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubLot
		{
			get
			{
				return this._SubLot;
			}
			set
			{
				if ((this._SubLot != value))
				{
					this._SubLot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parcel", DbType="VarChar(50)")]
		public string Parcel
		{
			get
			{
				return this._Parcel;
			}
			set
			{
				if ((this._Parcel != value))
				{
					this._Parcel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="VarChar(50)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this._PhysicalAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(40)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonNotes", DbType="VarChar(400)")]
		public string CommonNotes
		{
			get
			{
				return this._CommonNotes;
			}
			set
			{
				if ((this._CommonNotes != value))
				{
					this._CommonNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAssessment", DbType="Bit NOT NULL")]
		public bool IsAssessment
		{
			get
			{
				return this._IsAssessment;
			}
			set
			{
				if ((this._IsAssessment != value))
				{
					this._IsAssessment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="Int")]
		public System.Nullable<int> MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this._MeterNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterSystemNotes", DbType="VarChar(250)")]
		public string WaterSystemNotes
		{
			get
			{
				return this._WaterSystemNotes;
			}
			set
			{
				if ((this._WaterSystemNotes != value))
				{
					this._WaterSystemNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this._LastModified = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this._LastModifiedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerBalance", DbType="Money NOT NULL")]
		public decimal OwnerBalance
		{
			get
			{
				return this._OwnerBalance;
			}
			set
			{
				if ((this._OwnerBalance != value))
				{
					this._OwnerBalance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this._MailTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this._Address2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this._State = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this._Zip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(200)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this._EmailAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSendByEmail", DbType="Bit NOT NULL")]
		public bool IsSendByEmail
		{
			get
			{
				return this._IsSendByEmail;
			}
			set
			{
				if ((this._IsSendByEmail != value))
				{
					this._IsSendByEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryPhone", DbType="VarChar(20)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this._PrimaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryPhone", DbType="VarChar(20)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this._SecondaryPhone = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfCarts")]
	public partial class GolfCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _OwnerID;
		
		private string _Customer;
		
		private string _Year;
		
		private int _Quanity;
		
		private bool _IsPaid;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private bool _IsReceived;
		
		private System.Nullable<System.DateTime> _ReceivedDate;
		
		private System.DateTime _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnQuanityChanging(int value);
    partial void OnQuanityChanged();
    partial void OnIsPaidChanging(bool value);
    partial void OnIsPaidChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnIsReceivedChanging(bool value);
    partial void OnIsReceivedChanged();
    partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedDateChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public GolfCart()
		{
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quanity", DbType="Int NOT NULL")]
		public int Quanity
		{
			get
			{
				return this._Quanity;
			}
			set
			{
				if ((this._Quanity != value))
				{
					this.OnQuanityChanging(value);
					this.SendPropertyChanging();
					this._Quanity = value;
					this.SendPropertyChanged("Quanity");
					this.OnQuanityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="Bit NOT NULL")]
		public bool IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="Date")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReceived", DbType="Bit NOT NULL")]
		public bool IsReceived
		{
			get
			{
				return this._IsReceived;
			}
			set
			{
				if ((this._IsReceived != value))
				{
					this.OnIsReceivedChanging(value);
					this.SendPropertyChanging();
					this._IsReceived = value;
					this.SendPropertyChanged("IsReceived");
					this.OnIsReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_GolfCart", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.GolfCarts.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.GolfCarts.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_ChangeOfOwnership")]
	public partial class v_ChangeOfOwnership
	{
		
		private int _PropertyID;
		
		private string _Customer;
		
		private string _NewOwner;
		
		private int _NewOwnerID;
		
		private string _PreviousOwner;
		
		private int _PreviousOwnerID;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		public v_ChangeOfOwnership()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewOwner", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string NewOwner
		{
			get
			{
				return this._NewOwner;
			}
			set
			{
				if ((this._NewOwner != value))
				{
					this._NewOwner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewOwnerID", DbType="Int NOT NULL")]
		public int NewOwnerID
		{
			get
			{
				return this._NewOwnerID;
			}
			set
			{
				if ((this._NewOwnerID != value))
				{
					this._NewOwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousOwner", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string PreviousOwner
		{
			get
			{
				return this._PreviousOwner;
			}
			set
			{
				if ((this._PreviousOwner != value))
				{
					this._PreviousOwner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousOwnerID", DbType="Int NOT NULL")]
		public int PreviousOwnerID
		{
			get
			{
				return this._PreviousOwnerID;
			}
			set
			{
				if ((this._PreviousOwnerID != value))
				{
					this._PreviousOwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this._LastModified = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacilityUsages")]
	public partial class FacilityUsage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private int _OwnerID;
		
		private int _RelationshipId;
		
		private System.DateTime _Date;
		
		private int _GolfRoundsMember;
		
		private int _GolfRoundsGuest;
		
		private int _PoolMember;
		
		private int _PoolGuest;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnRelationshipIdChanging(int value);
    partial void OnRelationshipIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnGolfRoundsMemberChanging(int value);
    partial void OnGolfRoundsMemberChanged();
    partial void OnGolfRoundsGuestChanging(int value);
    partial void OnGolfRoundsGuestChanged();
    partial void OnPoolMemberChanging(int value);
    partial void OnPoolMemberChanged();
    partial void OnPoolGuestChanging(int value);
    partial void OnPoolGuestChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public FacilityUsage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", DbType="Int NOT NULL")]
		public int RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsMember", DbType="Int NOT NULL")]
		public int GolfRoundsMember
		{
			get
			{
				return this._GolfRoundsMember;
			}
			set
			{
				if ((this._GolfRoundsMember != value))
				{
					this.OnGolfRoundsMemberChanging(value);
					this.SendPropertyChanging();
					this._GolfRoundsMember = value;
					this.SendPropertyChanged("GolfRoundsMember");
					this.OnGolfRoundsMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsGuest", DbType="Int NOT NULL")]
		public int GolfRoundsGuest
		{
			get
			{
				return this._GolfRoundsGuest;
			}
			set
			{
				if ((this._GolfRoundsGuest != value))
				{
					this.OnGolfRoundsGuestChanging(value);
					this.SendPropertyChanging();
					this._GolfRoundsGuest = value;
					this.SendPropertyChanged("GolfRoundsGuest");
					this.OnGolfRoundsGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolMember", DbType="Int NOT NULL")]
		public int PoolMember
		{
			get
			{
				return this._PoolMember;
			}
			set
			{
				if ((this._PoolMember != value))
				{
					this.OnPoolMemberChanging(value);
					this.SendPropertyChanging();
					this._PoolMember = value;
					this.SendPropertyChanged("PoolMember");
					this.OnPoolMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolGuest", DbType="Int NOT NULL")]
		public int PoolGuest
		{
			get
			{
				return this._PoolGuest;
			}
			set
			{
				if ((this._PoolGuest != value))
				{
					this.OnPoolGuestChanging(value);
					this.SendPropertyChanging();
					this._PoolGuest = value;
					this.SendPropertyChanged("PoolGuest");
					this.OnPoolGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owners")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerID;
		
		private string _Customer;
		
		private string _MailTo;
		
		private string _Address;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _EmailAddress;
		
		private bool _IsSendByEmail;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		private System.Nullable<bool> _IsCurrentOwner;
		
		private System.Nullable<bool> _IsPrimaryRes;
		
		private System.Nullable<bool> _IsWeekend;
		
		private System.Nullable<bool> _IsSeasonal;
		
		private System.Nullable<bool> _IsRental;
		
		private System.Nullable<bool> _IsRVlot;
		
		private System.Nullable<bool> _IsEmptyLot;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<WaterShutoff> _WaterShutoffs;
		
		private EntitySet<Property> _Properties;
		
		private EntitySet<GolfCart> _GolfCarts;
		
		private EntitySet<Late90Day> _Late90Days;
		
		private EntitySet<Late60Day> _Late60Days;
		
		private EntitySet<Late30Day> _Late30Days;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<FinancialTransaction> _FinancialTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnIsSendByEmailChanging(bool value);
    partial void OnIsSendByEmailChanged();
    partial void OnPrimaryPhoneChanging(string value);
    partial void OnPrimaryPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnIsCurrentOwnerChanging(System.Nullable<bool> value);
    partial void OnIsCurrentOwnerChanged();
    partial void OnIsPrimaryResChanging(System.Nullable<bool> value);
    partial void OnIsPrimaryResChanged();
    partial void OnIsWeekendChanging(System.Nullable<bool> value);
    partial void OnIsWeekendChanged();
    partial void OnIsSeasonalChanging(System.Nullable<bool> value);
    partial void OnIsSeasonalChanged();
    partial void OnIsRentalChanging(System.Nullable<bool> value);
    partial void OnIsRentalChanged();
    partial void OnIsRVlotChanging(System.Nullable<bool> value);
    partial void OnIsRVlotChanged();
    partial void OnIsEmptyLotChanging(System.Nullable<bool> value);
    partial void OnIsEmptyLotChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Owner()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._WaterShutoffs = new EntitySet<WaterShutoff>(new Action<WaterShutoff>(this.attach_WaterShutoffs), new Action<WaterShutoff>(this.detach_WaterShutoffs));
			this._Properties = new EntitySet<Property>(new Action<Property>(this.attach_Properties), new Action<Property>(this.detach_Properties));
			this._GolfCarts = new EntitySet<GolfCart>(new Action<GolfCart>(this.attach_GolfCarts), new Action<GolfCart>(this.detach_GolfCarts));
			this._Late90Days = new EntitySet<Late90Day>(new Action<Late90Day>(this.attach_Late90Days), new Action<Late90Day>(this.detach_Late90Days));
			this._Late60Days = new EntitySet<Late60Day>(new Action<Late60Day>(this.attach_Late60Days), new Action<Late60Day>(this.detach_Late60Days));
			this._Late30Days = new EntitySet<Late30Day>(new Action<Late30Day>(this.attach_Late30Days), new Action<Late30Day>(this.detach_Late30Days));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._FinancialTransactions = new EntitySet<FinancialTransaction>(new Action<FinancialTransaction>(this.attach_FinancialTransactions), new Action<FinancialTransaction>(this.detach_FinancialTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(200)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSendByEmail", DbType="Bit NOT NULL")]
		public bool IsSendByEmail
		{
			get
			{
				return this._IsSendByEmail;
			}
			set
			{
				if ((this._IsSendByEmail != value))
				{
					this.OnIsSendByEmailChanging(value);
					this.SendPropertyChanging();
					this._IsSendByEmail = value;
					this.SendPropertyChanged("IsSendByEmail");
					this.OnIsSendByEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryPhone", DbType="VarChar(20)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this.OnPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhone = value;
					this.SendPropertyChanged("PrimaryPhone");
					this.OnPrimaryPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryPhone", DbType="VarChar(20)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentOwner", DbType="Bit")]
		public System.Nullable<bool> IsCurrentOwner
		{
			get
			{
				return this._IsCurrentOwner;
			}
			set
			{
				if ((this._IsCurrentOwner != value))
				{
					this.OnIsCurrentOwnerChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentOwner = value;
					this.SendPropertyChanged("IsCurrentOwner");
					this.OnIsCurrentOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrimaryRes", DbType="Bit")]
		public System.Nullable<bool> IsPrimaryRes
		{
			get
			{
				return this._IsPrimaryRes;
			}
			set
			{
				if ((this._IsPrimaryRes != value))
				{
					this.OnIsPrimaryResChanging(value);
					this.SendPropertyChanging();
					this._IsPrimaryRes = value;
					this.SendPropertyChanged("IsPrimaryRes");
					this.OnIsPrimaryResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWeekend", DbType="Bit")]
		public System.Nullable<bool> IsWeekend
		{
			get
			{
				return this._IsWeekend;
			}
			set
			{
				if ((this._IsWeekend != value))
				{
					this.OnIsWeekendChanging(value);
					this.SendPropertyChanging();
					this._IsWeekend = value;
					this.SendPropertyChanged("IsWeekend");
					this.OnIsWeekendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeasonal", DbType="Bit")]
		public System.Nullable<bool> IsSeasonal
		{
			get
			{
				return this._IsSeasonal;
			}
			set
			{
				if ((this._IsSeasonal != value))
				{
					this.OnIsSeasonalChanging(value);
					this.SendPropertyChanging();
					this._IsSeasonal = value;
					this.SendPropertyChanged("IsSeasonal");
					this.OnIsSeasonalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRental", DbType="Bit")]
		public System.Nullable<bool> IsRental
		{
			get
			{
				return this._IsRental;
			}
			set
			{
				if ((this._IsRental != value))
				{
					this.OnIsRentalChanging(value);
					this.SendPropertyChanging();
					this._IsRental = value;
					this.SendPropertyChanged("IsRental");
					this.OnIsRentalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRVlot", DbType="Bit")]
		public System.Nullable<bool> IsRVlot
		{
			get
			{
				return this._IsRVlot;
			}
			set
			{
				if ((this._IsRVlot != value))
				{
					this.OnIsRVlotChanging(value);
					this.SendPropertyChanging();
					this._IsRVlot = value;
					this.SendPropertyChanged("IsRVlot");
					this.OnIsRVlotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEmptyLot", DbType="Bit")]
		public System.Nullable<bool> IsEmptyLot
		{
			get
			{
				return this._IsEmptyLot;
			}
			set
			{
				if ((this._IsEmptyLot != value))
				{
					this.OnIsEmptyLotChanging(value);
					this.SendPropertyChanging();
					this._IsEmptyLot = value;
					this.SendPropertyChanged("IsEmptyLot");
					this.OnIsEmptyLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Relationship", Storage="_Relationships", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_WaterShutoff", Storage="_WaterShutoffs", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<WaterShutoff> WaterShutoffs
		{
			get
			{
				return this._WaterShutoffs;
			}
			set
			{
				this._WaterShutoffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Property", Storage="_Properties", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<Property> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_GolfCart", Storage="_GolfCarts", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<GolfCart> GolfCarts
		{
			get
			{
				return this._GolfCarts;
			}
			set
			{
				this._GolfCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Late90Day", Storage="_Late90Days", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<Late90Day> Late90Days
		{
			get
			{
				return this._Late90Days;
			}
			set
			{
				this._Late90Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Late60Day", Storage="_Late60Days", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<Late60Day> Late60Days
		{
			get
			{
				return this._Late60Days;
			}
			set
			{
				this._Late60Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Late30Day", Storage="_Late30Days", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<Late30Day> Late30Days
		{
			get
			{
				return this._Late30Days;
			}
			set
			{
				this._Late30Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Note", Storage="_Notes", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_FinancialTransaction", Storage="_FinancialTransactions", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this._FinancialTransactions;
			}
			set
			{
				this._FinancialTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_WaterShutoffs(WaterShutoff entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_WaterShutoffs(WaterShutoff entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_GolfCarts(GolfCart entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_GolfCarts(GolfCart entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Late90Days(Late90Day entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Late90Days(Late90Day entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Late60Days(Late60Day entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Late60Days(Late60Day entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Late30Days(Late30Day entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Late30Days(Late30Day entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Late90Days")]
	public partial class Late90Day : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _OwnerID;
		
		private string _Season;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnSeasonChanging(string value);
    partial void OnSeasonChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Late90Day()
		{
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Late90Day", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Late90Days.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Late90Days.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Late60Days")]
	public partial class Late60Day : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _OwnerID;
		
		private string _Season;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnSeasonChanging(string value);
    partial void OnSeasonChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Late60Day()
		{
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Late60Day", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Late60Days.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Late60Days.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Late30Days")]
	public partial class Late30Day : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _OwnerID;
		
		private string _MailTo;
		
		private string _Season;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnMailToChanging(string value);
    partial void OnMailToChanged();
    partial void OnSeasonChanging(string value);
    partial void OnSeasonChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Late30Day()
		{
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this.OnMailToChanging(value);
					this.SendPropertyChanging();
					this._MailTo = value;
					this.SendPropertyChanged("MailTo");
					this.OnMailToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Season", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Late30Day", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Late30Days.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Late30Days.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_WaterMeterReadings")]
	public partial class v_WaterMeterReading
	{
		
		private int _PropertyID;
		
		private System.Nullable<int> _OwnerID;
		
		private string _Customer;
		
		private string _PhysicalAddress;
		
		private System.Nullable<int> _WellNumber;
		
		private System.Nullable<System.DateTime> _ReadingDate;
		
		private System.Nullable<int> _MeterReading;
		
		private System.Nullable<int> _Consumption;
		
		private System.Nullable<int> _ReadingCount;
		
		private int _RowID;
		
		public v_WaterMeterReading()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="VarChar(50)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this._PhysicalAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellNumber", DbType="Int")]
		public System.Nullable<int> WellNumber
		{
			get
			{
				return this._WellNumber;
			}
			set
			{
				if ((this._WellNumber != value))
				{
					this._WellNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReadingDate
		{
			get
			{
				return this._ReadingDate;
			}
			set
			{
				if ((this._ReadingDate != value))
				{
					this._ReadingDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterReading", DbType="Int")]
		public System.Nullable<int> MeterReading
		{
			get
			{
				return this._MeterReading;
			}
			set
			{
				if ((this._MeterReading != value))
				{
					this._MeterReading = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumption", DbType="Int")]
		public System.Nullable<int> Consumption
		{
			get
			{
				return this._Consumption;
			}
			set
			{
				if ((this._Consumption != value))
				{
					this._Consumption = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingCount", DbType="Int")]
		public System.Nullable<int> ReadingCount
		{
			get
			{
				return this._ReadingCount;
			}
			set
			{
				if ((this._ReadingCount != value))
				{
					this._ReadingCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="Int NOT NULL")]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this._RowID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private System.Nullable<int> _PropertyID;
		
		private int _OwnerID;
		
		private string _Comment;
		
		private string _EnteredBy;
		
		private System.DateTime _Entered;
		
		private EntitySet<TransactionXNote> _TransactionXNotes;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnPropertyIDChanging(System.Nullable<int> value);
    partial void OnPropertyIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    partial void OnEnteredChanging(System.DateTime value);
    partial void OnEnteredChanged();
    #endregion
		
		public Note()
		{
			this._TransactionXNotes = new EntitySet<TransactionXNote>(new Action<TransactionXNote>(this.attach_TransactionXNotes), new Action<TransactionXNote>(this.detach_TransactionXNotes));
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int")]
		public System.Nullable<int> PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entered", DbType="DateTime NOT NULL")]
		public System.DateTime Entered
		{
			get
			{
				return this._Entered;
			}
			set
			{
				if ((this._Entered != value))
				{
					this.OnEnteredChanging(value);
					this.SendPropertyChanging();
					this._Entered = value;
					this.SendPropertyChanged("Entered");
					this.OnEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Note_TransactionXNote", Storage="_TransactionXNotes", ThisKey="RowID", OtherKey="NoteID")]
		public EntitySet<TransactionXNote> TransactionXNotes
		{
			get
			{
				return this._TransactionXNotes;
			}
			set
			{
				this._TransactionXNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Note", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionXNotes(TransactionXNote entity)
		{
			this.SendPropertyChanging();
			entity.Note = this;
		}
		
		private void detach_TransactionXNotes(TransactionXNote entity)
		{
			this.SendPropertyChanging();
			entity.Note = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionXNote")]
	public partial class TransactionXNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _TransactionID;
		
		private int _NoteID;
		
		private System.DateTime _Entered;
		
		private string _EnteredBy;
		
		private EntityRef<Note> _Note;
		
		private EntityRef<FinancialTransaction> _FinancialTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnNoteIDChanging(int value);
    partial void OnNoteIDChanged();
    partial void OnEnteredChanging(System.DateTime value);
    partial void OnEnteredChanged();
    partial void OnEnteredByChanging(string value);
    partial void OnEnteredByChanged();
    #endregion
		
		public TransactionXNote()
		{
			this._Note = default(EntityRef<Note>);
			this._FinancialTransaction = default(EntityRef<FinancialTransaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int NOT NULL")]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					if (this._FinancialTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteID", DbType="Int NOT NULL")]
		public int NoteID
		{
			get
			{
				return this._NoteID;
			}
			set
			{
				if ((this._NoteID != value))
				{
					if (this._Note.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoteIDChanging(value);
					this.SendPropertyChanging();
					this._NoteID = value;
					this.SendPropertyChanged("NoteID");
					this.OnNoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entered", DbType="DateTime NOT NULL")]
		public System.DateTime Entered
		{
			get
			{
				return this._Entered;
			}
			set
			{
				if ((this._Entered != value))
				{
					this.OnEnteredChanging(value);
					this.SendPropertyChanging();
					this._Entered = value;
					this.SendPropertyChanged("Entered");
					this.OnEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredBy", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string EnteredBy
		{
			get
			{
				return this._EnteredBy;
			}
			set
			{
				if ((this._EnteredBy != value))
				{
					this.OnEnteredByChanging(value);
					this.SendPropertyChanging();
					this._EnteredBy = value;
					this.SendPropertyChanged("EnteredBy");
					this.OnEnteredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Note_TransactionXNote", Storage="_Note", ThisKey="NoteID", OtherKey="RowID", IsForeignKey=true)]
		public Note Note
		{
			get
			{
				return this._Note.Entity;
			}
			set
			{
				Note previousValue = this._Note.Entity;
				if (((previousValue != value) 
							|| (this._Note.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Note.Entity = null;
						previousValue.TransactionXNotes.Remove(this);
					}
					this._Note.Entity = value;
					if ((value != null))
					{
						value.TransactionXNotes.Add(this);
						this._NoteID = value.RowID;
					}
					else
					{
						this._NoteID = default(int);
					}
					this.SendPropertyChanged("Note");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinancialTransaction_TransactionXNote", Storage="_FinancialTransaction", ThisKey="TransactionID", OtherKey="RowId", IsForeignKey=true)]
		public FinancialTransaction FinancialTransaction
		{
			get
			{
				return this._FinancialTransaction.Entity;
			}
			set
			{
				FinancialTransaction previousValue = this._FinancialTransaction.Entity;
				if (((previousValue != value) 
							|| (this._FinancialTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancialTransaction.Entity = null;
						previousValue.TransactionXNotes.Remove(this);
					}
					this._FinancialTransaction.Entity = value;
					if ((value != null))
					{
						value.TransactionXNotes.Add(this);
						this._TransactionID = value.RowId;
					}
					else
					{
						this._TransactionID = default(int);
					}
					this.SendPropertyChanged("FinancialTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_OwnerDetails")]
	public partial class v_OwnerDetail
	{
		
		private int _OwnerID;
		
		private decimal _Balance;
		
		private string _Customer;
		
		private string _MailTo;
		
		private string _Address;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		private string _EmailAddress;
		
		private bool _IsSendByEmail;
		
		private System.Nullable<int> _PropertyCount;
		
		public v_OwnerDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this._MailTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this._Address2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this._State = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this._Zip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryPhone", DbType="VarChar(20)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this._PrimaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryPhone", DbType="VarChar(20)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this._SecondaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(200)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this._EmailAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSendByEmail", DbType="Bit NOT NULL")]
		public bool IsSendByEmail
		{
			get
			{
				return this._IsSendByEmail;
			}
			set
			{
				if ((this._IsSendByEmail != value))
				{
					this._IsSendByEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyCount", DbType="Int")]
		public System.Nullable<int> PropertyCount
		{
			get
			{
				return this._PropertyCount;
			}
			set
			{
				if ((this._PropertyCount != value))
				{
					this._PropertyCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinancialTransactions")]
	public partial class FinancialTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowId;
		
		private int _OwnerID;
		
		private string _FiscalYear;
		
		private decimal _Balance;
		
		private System.Nullable<decimal> _CreditAmount;
		
		private System.Nullable<decimal> _DebitAmount;
		
		private System.DateTime _TransactionDate;
		
		private string _TransactionMethod;
		
		private string _TransactionAppliesTo;
		
		private string _Comment;
		
		private string _CheckNumber;
		
		private string _ReceiptNumber;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastMOdifiedBy;
		
		private EntitySet<TransactionXNote> _TransactionXNotes;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIdChanging(int value);
    partial void OnRowIdChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnFiscalYearChanging(string value);
    partial void OnFiscalYearChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    partial void OnCreditAmountChanging(System.Nullable<decimal> value);
    partial void OnCreditAmountChanged();
    partial void OnDebitAmountChanging(System.Nullable<decimal> value);
    partial void OnDebitAmountChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnTransactionMethodChanging(string value);
    partial void OnTransactionMethodChanged();
    partial void OnTransactionAppliesToChanging(string value);
    partial void OnTransactionAppliesToChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnReceiptNumberChanging(string value);
    partial void OnReceiptNumberChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastMOdifiedByChanging(string value);
    partial void OnLastMOdifiedByChanged();
    #endregion
		
		public FinancialTransaction()
		{
			this._TransactionXNotes = new EntitySet<TransactionXNote>(new Action<TransactionXNote>(this.attach_TransactionXNotes), new Action<TransactionXNote>(this.detach_TransactionXNotes));
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RowId
		{
			get
			{
				return this._RowId;
			}
			set
			{
				if ((this._RowId != value))
				{
					this.OnRowIdChanging(value);
					this.SendPropertyChanging();
					this._RowId = value;
					this.SendPropertyChanged("RowId");
					this.OnRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiscalYear", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FiscalYear
		{
			get
			{
				return this._FiscalYear;
			}
			set
			{
				if ((this._FiscalYear != value))
				{
					this.OnFiscalYearChanging(value);
					this.SendPropertyChanging();
					this._FiscalYear = value;
					this.SendPropertyChanged("FiscalYear");
					this.OnFiscalYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditAmount", DbType="Money")]
		public System.Nullable<decimal> CreditAmount
		{
			get
			{
				return this._CreditAmount;
			}
			set
			{
				if ((this._CreditAmount != value))
				{
					this.OnCreditAmountChanging(value);
					this.SendPropertyChanging();
					this._CreditAmount = value;
					this.SendPropertyChanged("CreditAmount");
					this.OnCreditAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitAmount", DbType="Money")]
		public System.Nullable<decimal> DebitAmount
		{
			get
			{
				return this._DebitAmount;
			}
			set
			{
				if ((this._DebitAmount != value))
				{
					this.OnDebitAmountChanging(value);
					this.SendPropertyChanging();
					this._DebitAmount = value;
					this.SendPropertyChanged("DebitAmount");
					this.OnDebitAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionMethod", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionMethod
		{
			get
			{
				return this._TransactionMethod;
			}
			set
			{
				if ((this._TransactionMethod != value))
				{
					this.OnTransactionMethodChanging(value);
					this.SendPropertyChanging();
					this._TransactionMethod = value;
					this.SendPropertyChanged("TransactionMethod");
					this.OnTransactionMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionAppliesTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TransactionAppliesTo
		{
			get
			{
				return this._TransactionAppliesTo;
			}
			set
			{
				if ((this._TransactionAppliesTo != value))
				{
					this.OnTransactionAppliesToChanging(value);
					this.SendPropertyChanging();
					this._TransactionAppliesTo = value;
					this.SendPropertyChanged("TransactionAppliesTo");
					this.OnTransactionAppliesToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckNumber", DbType="VarChar(20)")]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptNumber", DbType="VarChar(20)")]
		public string ReceiptNumber
		{
			get
			{
				return this._ReceiptNumber;
			}
			set
			{
				if ((this._ReceiptNumber != value))
				{
					this.OnReceiptNumberChanging(value);
					this.SendPropertyChanging();
					this._ReceiptNumber = value;
					this.SendPropertyChanged("ReceiptNumber");
					this.OnReceiptNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastMOdifiedBy", DbType="VarChar(40)")]
		public string LastMOdifiedBy
		{
			get
			{
				return this._LastMOdifiedBy;
			}
			set
			{
				if ((this._LastMOdifiedBy != value))
				{
					this.OnLastMOdifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastMOdifiedBy = value;
					this.SendPropertyChanged("LastMOdifiedBy");
					this.OnLastMOdifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FinancialTransaction_TransactionXNote", Storage="_TransactionXNotes", ThisKey="RowId", OtherKey="TransactionID")]
		public EntitySet<TransactionXNote> TransactionXNotes
		{
			get
			{
				return this._TransactionXNotes;
			}
			set
			{
				this._TransactionXNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_FinancialTransaction", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.FinancialTransactions.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.FinancialTransactions.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionXNotes(TransactionXNote entity)
		{
			this.SendPropertyChanging();
			entity.FinancialTransaction = this;
		}
		
		private void detach_TransactionXNotes(TransactionXNote entity)
		{
			this.SendPropertyChanging();
			entity.FinancialTransaction = null;
		}
	}
	
	public partial class usp_GetPropertyByIdResult
	{
		
		private int _PropertyID;
		
		private string _Customer;
		
		private int _Section;
		
		private int _Block;
		
		private int _Lot;
		
		private string _SubLot;
		
		private string _BillTo;
		
		private decimal _Balance;
		
		private bool _IsInGoodStanding;
		
		private string _Parcel;
		
		private string _PhysicalAddress;
		
		private string _Status;
		
		private string _OwnerLName;
		
		private string _OwnerFName;
		
		private string _OwnerAddress;
		
		private string _OwnerAddress2;
		
		private string _OwnerCity;
		
		private string _OwnerState;
		
		private string _OwnerZip;
		
		private string _OwnerPrimaryPhone;
		
		private string _OwnerSecondaryPhone;
		
		private string _OwnerEmail;
		
		private System.Nullable<int> _MeterNumber;
		
		private string _PropertyNotes;
		
		private string _WaterSystemNotes;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		public usp_GetPropertyByIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="Int NOT NULL")]
		public int Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this._Section = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Block", DbType="Int NOT NULL")]
		public int Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this._Block = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lot", DbType="Int NOT NULL")]
		public int Lot
		{
			get
			{
				return this._Lot;
			}
			set
			{
				if ((this._Lot != value))
				{
					this._Lot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubLot", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubLot
		{
			get
			{
				return this._SubLot;
			}
			set
			{
				if ((this._SubLot != value))
				{
					this._SubLot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillTo", DbType="VarChar(100)")]
		public string BillTo
		{
			get
			{
				return this._BillTo;
			}
			set
			{
				if ((this._BillTo != value))
				{
					this._BillTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInGoodStanding", DbType="Bit NOT NULL")]
		public bool IsInGoodStanding
		{
			get
			{
				return this._IsInGoodStanding;
			}
			set
			{
				if ((this._IsInGoodStanding != value))
				{
					this._IsInGoodStanding = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parcel", DbType="VarChar(50)")]
		public string Parcel
		{
			get
			{
				return this._Parcel;
			}
			set
			{
				if ((this._Parcel != value))
				{
					this._Parcel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalAddress", DbType="VarChar(50)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this._PhysicalAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerLName", DbType="VarChar(50)")]
		public string OwnerLName
		{
			get
			{
				return this._OwnerLName;
			}
			set
			{
				if ((this._OwnerLName != value))
				{
					this._OwnerLName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerFName", DbType="VarChar(50)")]
		public string OwnerFName
		{
			get
			{
				return this._OwnerFName;
			}
			set
			{
				if ((this._OwnerFName != value))
				{
					this._OwnerFName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAddress", DbType="VarChar(50)")]
		public string OwnerAddress
		{
			get
			{
				return this._OwnerAddress;
			}
			set
			{
				if ((this._OwnerAddress != value))
				{
					this._OwnerAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAddress2", DbType="VarChar(50)")]
		public string OwnerAddress2
		{
			get
			{
				return this._OwnerAddress2;
			}
			set
			{
				if ((this._OwnerAddress2 != value))
				{
					this._OwnerAddress2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerCity", DbType="VarChar(50)")]
		public string OwnerCity
		{
			get
			{
				return this._OwnerCity;
			}
			set
			{
				if ((this._OwnerCity != value))
				{
					this._OwnerCity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerState", DbType="VarChar(4)")]
		public string OwnerState
		{
			get
			{
				return this._OwnerState;
			}
			set
			{
				if ((this._OwnerState != value))
				{
					this._OwnerState = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerZip", DbType="VarChar(20)")]
		public string OwnerZip
		{
			get
			{
				return this._OwnerZip;
			}
			set
			{
				if ((this._OwnerZip != value))
				{
					this._OwnerZip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPrimaryPhone", DbType="VarChar(20)")]
		public string OwnerPrimaryPhone
		{
			get
			{
				return this._OwnerPrimaryPhone;
			}
			set
			{
				if ((this._OwnerPrimaryPhone != value))
				{
					this._OwnerPrimaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerSecondaryPhone", DbType="VarChar(20)")]
		public string OwnerSecondaryPhone
		{
			get
			{
				return this._OwnerSecondaryPhone;
			}
			set
			{
				if ((this._OwnerSecondaryPhone != value))
				{
					this._OwnerSecondaryPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerEmail", DbType="VarChar(50)")]
		public string OwnerEmail
		{
			get
			{
				return this._OwnerEmail;
			}
			set
			{
				if ((this._OwnerEmail != value))
				{
					this._OwnerEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterNumber", DbType="Int")]
		public System.Nullable<int> MeterNumber
		{
			get
			{
				return this._MeterNumber;
			}
			set
			{
				if ((this._MeterNumber != value))
				{
					this._MeterNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNotes", DbType="VarChar(500)")]
		public string PropertyNotes
		{
			get
			{
				return this._PropertyNotes;
			}
			set
			{
				if ((this._PropertyNotes != value))
				{
					this._PropertyNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterSystemNotes", DbType="VarChar(250)")]
		public string WaterSystemNotes
		{
			get
			{
				return this._WaterSystemNotes;
			}
			set
			{
				if ((this._WaterSystemNotes != value))
				{
					this._WaterSystemNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this._LastModified = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this._LastModifiedBy = value;
				}
			}
		}
	}
	
	public partial class usp_GetFacilityUsageForDateResult
	{
		
		private int _RowID;
		
		private int _PropertyID;
		
		private int _RelationshipId;
		
		private System.DateTime _Date;
		
		private int _GolfRoundsMember;
		
		private int _GolfRoundsGuest;
		
		private int _PoolMember;
		
		private int _PoolGuest;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		public usp_GetFacilityUsageForDateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowID", DbType="Int NOT NULL")]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this._RowID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", DbType="Int NOT NULL")]
		public int RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this._RelationshipId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsMember", DbType="Int NOT NULL")]
		public int GolfRoundsMember
		{
			get
			{
				return this._GolfRoundsMember;
			}
			set
			{
				if ((this._GolfRoundsMember != value))
				{
					this._GolfRoundsMember = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GolfRoundsGuest", DbType="Int NOT NULL")]
		public int GolfRoundsGuest
		{
			get
			{
				return this._GolfRoundsGuest;
			}
			set
			{
				if ((this._GolfRoundsGuest != value))
				{
					this._GolfRoundsGuest = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolMember", DbType="Int NOT NULL")]
		public int PoolMember
		{
			get
			{
				return this._PoolMember;
			}
			set
			{
				if ((this._PoolMember != value))
				{
					this._PoolMember = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoolGuest", DbType="Int NOT NULL")]
		public int PoolGuest
		{
			get
			{
				return this._PoolGuest;
			}
			set
			{
				if ((this._PoolGuest != value))
				{
					this._PoolGuest = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this._LastModified = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="VarChar(40)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this._LastModifiedBy = value;
				}
			}
		}
	}
	
	public partial class usp_GetInvoiceForOwnerResult
	{
		
		private System.Nullable<int> _OwnerID;
		
		private string _Customer;
		
		private string _MailTo;
		
		private string _Address;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Item;
		
		private int _Quantity;
		
		private System.Nullable<decimal> _Rate;
		
		private bool _IsAssessment;
		
		private string _Assessment;
		
		private System.Nullable<decimal> _AssessmentAmount;
		
		private System.Nullable<decimal> _Total;
		
		public usp_GetInvoiceForOwnerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(100)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailTo", DbType="VarChar(100)")]
		public string MailTo
		{
			get
			{
				return this._MailTo;
			}
			set
			{
				if ((this._MailTo != value))
				{
					this._MailTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(100)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this._Address2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(4)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this._State = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(20)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this._Zip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="VarChar(52) NOT NULL", CanBeNull=false)]
		public string Item
		{
			get
			{
				return this._Item;
			}
			set
			{
				if ((this._Item != value))
				{
					this._Item = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Money")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAssessment", DbType="Bit NOT NULL")]
		public bool IsAssessment
		{
			get
			{
				return this._IsAssessment;
			}
			set
			{
				if ((this._IsAssessment != value))
				{
					this._IsAssessment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assessment", DbType="VarChar(50)")]
		public string Assessment
		{
			get
			{
				return this._Assessment;
			}
			set
			{
				if ((this._Assessment != value))
				{
					this._Assessment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentAmount", DbType="Money")]
		public System.Nullable<decimal> AssessmentAmount
		{
			get
			{
				return this._AssessmentAmount;
			}
			set
			{
				if ((this._AssessmentAmount != value))
				{
					this._AssessmentAmount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
